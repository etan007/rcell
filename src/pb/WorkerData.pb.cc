// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerData.proto

#include "WorkerData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PBWorkerGaugeMetric::PBWorkerGaugeMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0} {}
struct PBWorkerGaugeMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerGaugeMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerGaugeMetricDefaultTypeInternal() {}
  union {
    PBWorkerGaugeMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerGaugeMetricDefaultTypeInternal _PBWorkerGaugeMetric_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerHistogramMetricBucket::PBWorkerHistogramMetricBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upper_bound_)*/0
  , /*decltype(_impl_.samples_)*/0u} {}
struct PBWorkerHistogramMetricBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerHistogramMetricBucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerHistogramMetricBucketDefaultTypeInternal() {}
  union {
    PBWorkerHistogramMetricBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerHistogramMetricBucketDefaultTypeInternal _PBWorkerHistogramMetricBucket_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerHistogramMetric::PBWorkerHistogramMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_.bucket_count_)*/0u} {}
struct PBWorkerHistogramMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerHistogramMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerHistogramMetricDefaultTypeInternal() {}
  union {
    PBWorkerHistogramMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerHistogramMetricDefaultTypeInternal _PBWorkerHistogramMetric_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerMetrics::PBWorkerMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gauge_metrics_)*/{}
  , /*decltype(_impl_.histogram_metrics_)*/{}
  , /*decltype(_impl_.load_)*/0
  , /*decltype(_impl_.gauge_metric_count_)*/0u
  , /*decltype(_impl_.histogram_metric_count_)*/0u} {}
struct PBWorkerMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerMetricsDefaultTypeInternal() {}
  union {
    PBWorkerMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerMetricsDefaultTypeInternal _PBWorkerMetrics_default_instance_;
PROTOBUF_CONSTEXPR PBSchemaComponentData::PBSchemaComponentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_id_)*/0u} {}
struct PBSchemaComponentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBSchemaComponentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBSchemaComponentDataDefaultTypeInternal() {}
  union {
    PBSchemaComponentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBSchemaComponentDataDefaultTypeInternal _PBSchemaComponentData_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerComponentDataHandle::PBWorkerComponentDataHandle(
    ::_pbi::ConstantInitialized) {}
struct PBWorkerComponentDataHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerComponentDataHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerComponentDataHandleDefaultTypeInternal() {}
  union {
    PBWorkerComponentDataHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerComponentDataHandleDefaultTypeInternal _PBWorkerComponentDataHandle_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerComponentData::PBWorkerComponentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorkerComponentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerComponentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerComponentDataDefaultTypeInternal() {}
  union {
    PBWorkerComponentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerComponentDataDefaultTypeInternal _PBWorkerComponentData_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerEntity::PBWorkerEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_.entity_id_)*/int64_t{0}
  , /*decltype(_impl_.component_count_)*/0u} {}
struct PBWorkerEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerEntityDefaultTypeInternal() {}
  union {
    PBWorkerEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerEntityDefaultTypeInternal _PBWorkerEntity_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerComponentUpdate::PBWorkerComponentUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorkerComponentUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerComponentUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerComponentUpdateDefaultTypeInternal() {}
  union {
    PBWorkerComponentUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerComponentUpdateDefaultTypeInternal _PBWorkerComponentUpdate_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerWorkerAttributes::PBWorkerWorkerAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.attribute_count_)*/0u} {}
struct PBWorkerWorkerAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerWorkerAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerWorkerAttributesDefaultTypeInternal() {}
  union {
    PBWorkerWorkerAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerWorkerAttributesDefaultTypeInternal _PBWorkerWorkerAttributes_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerCommandRequest::PBWorkerCommandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorkerCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerCommandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerCommandRequestDefaultTypeInternal() {}
  union {
    PBWorkerCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerCommandRequestDefaultTypeInternal _PBWorkerCommandRequest_default_instance_;
PROTOBUF_CONSTEXPR PBWorkerCommandResponse::PBWorkerCommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorkerCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorkerCommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorkerCommandResponseDefaultTypeInternal() {}
  union {
    PBWorkerCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorkerCommandResponseDefaultTypeInternal _PBWorkerCommandResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_WorkerData_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_WorkerData_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_WorkerData_2eproto = nullptr;

const uint32_t TableStruct_WorkerData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PBWorkerGaugeMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerGaugeMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerGaugeMetric, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerGaugeMetric, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetricBucket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetricBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetricBucket, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetricBucket, _impl_.samples_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _impl_.bucket_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerHistogramMetric, _impl_.buckets_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_.gauge_metric_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_.gauge_metrics_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_.histogram_metric_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerMetrics, _impl_.histogram_metrics_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBSchemaComponentData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBSchemaComponentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBSchemaComponentData, _impl_.schema_id_),
  PROTOBUF_FIELD_OFFSET(::PBSchemaComponentData, _impl_.data_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentDataHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentData, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorkerEntity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerEntity, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerEntity, _impl_.component_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerEntity, _impl_.components_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerComponentUpdate, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorkerWorkerAttributes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerWorkerAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerWorkerAttributes, _impl_.attribute_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerWorkerAttributes, _impl_.attributes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandRequest, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorkerCommandResponse, _impl_.user_handle_),
  0,
  3,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::PBWorkerGaugeMetric)},
  { 10, 18, -1, sizeof(::PBWorkerHistogramMetricBucket)},
  { 20, 30, -1, sizeof(::PBWorkerHistogramMetric)},
  { 34, 45, -1, sizeof(::PBWorkerMetrics)},
  { 50, 58, -1, sizeof(::PBSchemaComponentData)},
  { 60, -1, -1, sizeof(::PBWorkerComponentDataHandle)},
  { 66, 76, -1, sizeof(::PBWorkerComponentData)},
  { 80, 89, -1, sizeof(::PBWorkerEntity)},
  { 92, 102, -1, sizeof(::PBWorkerComponentUpdate)},
  { 106, 114, -1, sizeof(::PBWorkerWorkerAttributes)},
  { 116, 126, -1, sizeof(::PBWorkerCommandRequest)},
  { 130, 140, -1, sizeof(::PBWorkerCommandResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PBWorkerGaugeMetric_default_instance_._instance,
  &::_PBWorkerHistogramMetricBucket_default_instance_._instance,
  &::_PBWorkerHistogramMetric_default_instance_._instance,
  &::_PBWorkerMetrics_default_instance_._instance,
  &::_PBSchemaComponentData_default_instance_._instance,
  &::_PBWorkerComponentDataHandle_default_instance_._instance,
  &::_PBWorkerComponentData_default_instance_._instance,
  &::_PBWorkerEntity_default_instance_._instance,
  &::_PBWorkerComponentUpdate_default_instance_._instance,
  &::_PBWorkerWorkerAttributes_default_instance_._instance,
  &::_PBWorkerCommandRequest_default_instance_._instance,
  &::_PBWorkerCommandResponse_default_instance_._instance,
};

const char descriptor_table_protodef_WorkerData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020WorkerData.proto\"1\n\023PBWorkerGaugeMetri"
  "c\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\"E\n\035PBWorke"
  "rHistogramMetricBucket\022\023\n\013upper_bound\030\001 "
  "\001(\001\022\017\n\007samples\030\002 \001(\r\"z\n\027PBWorkerHistogra"
  "mMetric\022\013\n\003key\030\001 \001(\t\022\013\n\003sum\030\002 \001(\001\022\024\n\014buc"
  "ket_count\030\003 \001(\r\022/\n\007buckets\030\004 \003(\0132\036.PBWor"
  "kerHistogramMetricBucket\"\275\001\n\017PBWorkerMet"
  "rics\022\014\n\004load\030\001 \001(\001\022\032\n\022gauge_metric_count"
  "\030\002 \001(\r\022+\n\rgauge_metrics\030\003 \003(\0132\024.PBWorker"
  "GaugeMetric\022\036\n\026histogram_metric_count\030\004 "
  "\001(\r\0223\n\021histogram_metrics\030\005 \003(\0132\030.PBWorke"
  "rHistogramMetric\"8\n\025PBSchemaComponentDat"
  "a\022\021\n\tschema_id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"\035\n\033PB"
  "WorkerComponentDataHandle\"\237\001\n\025PBWorkerCo"
  "mponentData\022\020\n\010reserved\030\001 \001(\014\022\024\n\014compone"
  "nt_id\030\002 \001(\r\022+\n\013schema_type\030\003 \001(\0132\026.PBSch"
  "emaComponentData\0221\n\013user_handle\030\004 \001(\0132\034."
  "PBWorkerComponentDataHandle\"h\n\016PBWorkerE"
  "ntity\022\021\n\tentity_id\030\001 \001(\003\022\027\n\017component_co"
  "unt\030\002 \001(\r\022*\n\ncomponents\030\003 \003(\0132\026.PBWorker"
  "ComponentData\"\241\001\n\027PBWorkerComponentUpdat"
  "e\022\020\n\010reserved\030\001 \001(\014\022\024\n\014component_id\030\002 \001("
  "\r\022+\n\013schema_type\030\003 \001(\0132\026.PBSchemaCompone"
  "ntData\0221\n\013user_handle\030\004 \001(\0132\034.PBWorkerCo"
  "mponentDataHandle\"G\n\030PBWorkerWorkerAttri"
  "butes\022\027\n\017attribute_count\030\001 \001(\r\022\022\n\nattrib"
  "utes\030\002 \003(\014\"\240\001\n\026PBWorkerCommandRequest\022\020\n"
  "\010reserved\030\001 \001(\014\022\024\n\014component_id\030\002 \001(\r\022+\n"
  "\013schema_type\030\003 \001(\0132\026.PBSchemaComponentDa"
  "ta\0221\n\013user_handle\030\004 \001(\0132\034.PBWorkerCompon"
  "entDataHandle\"\241\001\n\027PBWorkerCommandRespons"
  "e\022\020\n\010reserved\030\001 \001(\014\022\024\n\014component_id\030\002 \001("
  "\r\022+\n\013schema_type\030\003 \001(\0132\026.PBSchemaCompone"
  "ntData\0221\n\013user_handle\030\004 \001(\0132\034.PBWorkerCo"
  "mponentDataHandle*\230\002\n\022PBWorkerStatusCode"
  "\022\036\n\032WORKER_STATUS_CODE_SUCCESS\020\001\022\036\n\032WORK"
  "ER_STATUS_CODE_TIMEOUT\020\002\022 \n\034WORKER_STATU"
  "S_CODE_NOT_FOUND\020\003\022%\n!WORKER_STATUS_CODE"
  "_AUTHORITY_LOST\020\004\022(\n$WORKER_STATUS_CODE_"
  "PERMISSION_DENIED\020\005\022(\n$WORKER_STATUS_COD"
  "E_APPLICATION_ERROR\020\006\022%\n!WORKER_STATUS_C"
  "ODE_INTERNAL_ERROR\020\007*\215\001\n\021PBWorkerAuthori"
  "ty\022&\n\"WORKER_AUTHORITY_NOT_AUTHORITATIVE"
  "\020\000\022\"\n\036WORKER_AUTHORITY_AUTHORITATIVE\020\001\022,"
  "\n(WORKER_AUTHORITY_AUTHORITY_LOSS_IMMINE"
  "NT\020\002"
  ;
static ::_pbi::once_flag descriptor_table_WorkerData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_WorkerData_2eproto = {
    false, false, 1804, descriptor_table_protodef_WorkerData_2eproto,
    "WorkerData.proto",
    &descriptor_table_WorkerData_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_WorkerData_2eproto::offsets,
    file_level_metadata_WorkerData_2eproto, file_level_enum_descriptors_WorkerData_2eproto,
    file_level_service_descriptors_WorkerData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_WorkerData_2eproto_getter() {
  return &descriptor_table_WorkerData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_WorkerData_2eproto(&descriptor_table_WorkerData_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorkerStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WorkerData_2eproto);
  return file_level_enum_descriptors_WorkerData_2eproto[0];
}
bool PBWorkerStatusCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorkerAuthority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WorkerData_2eproto);
  return file_level_enum_descriptors_WorkerData_2eproto[1];
}
bool PBWorkerAuthority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PBWorkerGaugeMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerGaugeMetric>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorkerGaugeMetric::PBWorkerGaugeMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerGaugeMetric)
}
PBWorkerGaugeMetric::PBWorkerGaugeMetric(const PBWorkerGaugeMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerGaugeMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerGaugeMetric)
}

inline void PBWorkerGaugeMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerGaugeMetric::~PBWorkerGaugeMetric() {
  // @@protoc_insertion_point(destructor:PBWorkerGaugeMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerGaugeMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void PBWorkerGaugeMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerGaugeMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerGaugeMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerGaugeMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PBWorkerGaugeMetric.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerGaugeMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerGaugeMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PBWorkerGaugeMetric.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerGaugeMetric)
  return target;
}

size_t PBWorkerGaugeMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerGaugeMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerGaugeMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerGaugeMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerGaugeMetric::GetClassData() const { return &_class_data_; }


void PBWorkerGaugeMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerGaugeMetric*>(&to_msg);
  auto& from = static_cast<const PBWorkerGaugeMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerGaugeMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerGaugeMetric::CopyFrom(const PBWorkerGaugeMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerGaugeMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerGaugeMetric::IsInitialized() const {
  return true;
}

void PBWorkerGaugeMetric::InternalSwap(PBWorkerGaugeMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerGaugeMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[0]);
}

// ===================================================================

class PBWorkerHistogramMetricBucket::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerHistogramMetricBucket>()._impl_._has_bits_);
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorkerHistogramMetricBucket::PBWorkerHistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerHistogramMetricBucket)
}
PBWorkerHistogramMetricBucket::PBWorkerHistogramMetricBucket(const PBWorkerHistogramMetricBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerHistogramMetricBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_bound_){}
    , decltype(_impl_.samples_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upper_bound_, &from._impl_.upper_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.samples_) -
    reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.samples_));
  // @@protoc_insertion_point(copy_constructor:PBWorkerHistogramMetricBucket)
}

inline void PBWorkerHistogramMetricBucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_bound_){0}
    , decltype(_impl_.samples_){0u}
  };
}

PBWorkerHistogramMetricBucket::~PBWorkerHistogramMetricBucket() {
  // @@protoc_insertion_point(destructor:PBWorkerHistogramMetricBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerHistogramMetricBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PBWorkerHistogramMetricBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerHistogramMetricBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerHistogramMetricBucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.upper_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.samples_) -
        reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.samples_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerHistogramMetricBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double upper_bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_samples(&has_bits);
          _impl_.samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerHistogramMetricBucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerHistogramMetricBucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double upper_bound = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_bound(), target);
  }

  // optional uint32 samples = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerHistogramMetricBucket)
  return target;
}

size_t PBWorkerHistogramMetricBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerHistogramMetricBucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double upper_bound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 samples = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_samples());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerHistogramMetricBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerHistogramMetricBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerHistogramMetricBucket::GetClassData() const { return &_class_data_; }


void PBWorkerHistogramMetricBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerHistogramMetricBucket*>(&to_msg);
  auto& from = static_cast<const PBWorkerHistogramMetricBucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerHistogramMetricBucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.samples_ = from._impl_.samples_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerHistogramMetricBucket::CopyFrom(const PBWorkerHistogramMetricBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerHistogramMetricBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerHistogramMetricBucket::IsInitialized() const {
  return true;
}

void PBWorkerHistogramMetricBucket::InternalSwap(PBWorkerHistogramMetricBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerHistogramMetricBucket, _impl_.samples_)
      + sizeof(PBWorkerHistogramMetricBucket::_impl_.samples_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerHistogramMetricBucket, _impl_.upper_bound_)>(
          reinterpret_cast<char*>(&_impl_.upper_bound_),
          reinterpret_cast<char*>(&other->_impl_.upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerHistogramMetricBucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[1]);
}

// ===================================================================

class PBWorkerHistogramMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerHistogramMetric>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bucket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PBWorkerHistogramMetric::PBWorkerHistogramMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerHistogramMetric)
}
PBWorkerHistogramMetric::PBWorkerHistogramMetric(const PBWorkerHistogramMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerHistogramMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){from._impl_.buckets_}
    , decltype(_impl_.key_){}
    , decltype(_impl_.sum_){}
    , decltype(_impl_.bucket_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sum_, &from._impl_.sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bucket_count_) -
    reinterpret_cast<char*>(&_impl_.sum_)) + sizeof(_impl_.bucket_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorkerHistogramMetric)
}

inline void PBWorkerHistogramMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){arena}
    , decltype(_impl_.key_){}
    , decltype(_impl_.sum_){0}
    , decltype(_impl_.bucket_count_){0u}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerHistogramMetric::~PBWorkerHistogramMetric() {
  // @@protoc_insertion_point(destructor:PBWorkerHistogramMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerHistogramMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buckets_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void PBWorkerHistogramMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerHistogramMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerHistogramMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buckets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.sum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bucket_count_) -
        reinterpret_cast<char*>(&_impl_.sum_)) + sizeof(_impl_.bucket_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerHistogramMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PBWorkerHistogramMetric.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sum(&has_bits);
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bucket_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bucket_count(&has_bits);
          _impl_.bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorkerHistogramMetricBucket buckets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerHistogramMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerHistogramMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PBWorkerHistogramMetric.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional double sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_sum(), target);
  }

  // optional uint32 bucket_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bucket_count(), target);
  }

  // repeated .PBWorkerHistogramMetricBucket buckets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_buckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerHistogramMetric)
  return target;
}

size_t PBWorkerHistogramMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerHistogramMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorkerHistogramMetricBucket buckets = 4;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->_impl_.buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional double sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 bucket_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerHistogramMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerHistogramMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerHistogramMetric::GetClassData() const { return &_class_data_; }


void PBWorkerHistogramMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerHistogramMetric*>(&to_msg);
  auto& from = static_cast<const PBWorkerHistogramMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerHistogramMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buckets_.MergeFrom(from._impl_.buckets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sum_ = from._impl_.sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bucket_count_ = from._impl_.bucket_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerHistogramMetric::CopyFrom(const PBWorkerHistogramMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerHistogramMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerHistogramMetric::IsInitialized() const {
  return true;
}

void PBWorkerHistogramMetric::InternalSwap(PBWorkerHistogramMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buckets_.InternalSwap(&other->_impl_.buckets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerHistogramMetric, _impl_.bucket_count_)
      + sizeof(PBWorkerHistogramMetric::_impl_.bucket_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerHistogramMetric, _impl_.sum_)>(
          reinterpret_cast<char*>(&_impl_.sum_),
          reinterpret_cast<char*>(&other->_impl_.sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerHistogramMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[2]);
}

// ===================================================================

class PBWorkerMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerMetrics>()._impl_._has_bits_);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gauge_metric_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_histogram_metric_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PBWorkerMetrics::PBWorkerMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerMetrics)
}
PBWorkerMetrics::PBWorkerMetrics(const PBWorkerMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gauge_metrics_){from._impl_.gauge_metrics_}
    , decltype(_impl_.histogram_metrics_){from._impl_.histogram_metrics_}
    , decltype(_impl_.load_){}
    , decltype(_impl_.gauge_metric_count_){}
    , decltype(_impl_.histogram_metric_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.load_, &from._impl_.load_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.histogram_metric_count_) -
    reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.histogram_metric_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorkerMetrics)
}

inline void PBWorkerMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gauge_metrics_){arena}
    , decltype(_impl_.histogram_metrics_){arena}
    , decltype(_impl_.load_){0}
    , decltype(_impl_.gauge_metric_count_){0u}
    , decltype(_impl_.histogram_metric_count_){0u}
  };
}

PBWorkerMetrics::~PBWorkerMetrics() {
  // @@protoc_insertion_point(destructor:PBWorkerMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gauge_metrics_.~RepeatedPtrField();
  _impl_.histogram_metrics_.~RepeatedPtrField();
}

void PBWorkerMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gauge_metrics_.Clear();
  _impl_.histogram_metrics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.histogram_metric_count_) -
        reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.histogram_metric_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_load(&has_bits);
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gauge_metric_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gauge_metric_count(&has_bits);
          _impl_.gauge_metric_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorkerGaugeMetric gauge_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gauge_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 histogram_metric_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_histogram_metric_count(&has_bits);
          _impl_.histogram_metric_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorkerHistogramMetric histogram_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histogram_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_load(), target);
  }

  // optional uint32 gauge_metric_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gauge_metric_count(), target);
  }

  // repeated .PBWorkerGaugeMetric gauge_metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gauge_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_gauge_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 histogram_metric_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_histogram_metric_count(), target);
  }

  // repeated .PBWorkerHistogramMetric histogram_metrics = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histogram_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_histogram_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerMetrics)
  return target;
}

size_t PBWorkerMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorkerGaugeMetric gauge_metrics = 3;
  total_size += 1UL * this->_internal_gauge_metrics_size();
  for (const auto& msg : this->_impl_.gauge_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PBWorkerHistogramMetric histogram_metrics = 5;
  total_size += 1UL * this->_internal_histogram_metrics_size();
  for (const auto& msg : this->_impl_.histogram_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double load = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 gauge_metric_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gauge_metric_count());
    }

    // optional uint32 histogram_metric_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_histogram_metric_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerMetrics::GetClassData() const { return &_class_data_; }


void PBWorkerMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerMetrics*>(&to_msg);
  auto& from = static_cast<const PBWorkerMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gauge_metrics_.MergeFrom(from._impl_.gauge_metrics_);
  _this->_impl_.histogram_metrics_.MergeFrom(from._impl_.histogram_metrics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.load_ = from._impl_.load_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gauge_metric_count_ = from._impl_.gauge_metric_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.histogram_metric_count_ = from._impl_.histogram_metric_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerMetrics::CopyFrom(const PBWorkerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerMetrics::IsInitialized() const {
  return true;
}

void PBWorkerMetrics::InternalSwap(PBWorkerMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gauge_metrics_.InternalSwap(&other->_impl_.gauge_metrics_);
  _impl_.histogram_metrics_.InternalSwap(&other->_impl_.histogram_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerMetrics, _impl_.histogram_metric_count_)
      + sizeof(PBWorkerMetrics::_impl_.histogram_metric_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerMetrics, _impl_.load_)>(
          reinterpret_cast<char*>(&_impl_.load_),
          reinterpret_cast<char*>(&other->_impl_.load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[3]);
}

// ===================================================================

class PBSchemaComponentData::_Internal {
 public:
  using HasBits = decltype(std::declval<PBSchemaComponentData>()._impl_._has_bits_);
  static void set_has_schema_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PBSchemaComponentData::PBSchemaComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBSchemaComponentData)
}
PBSchemaComponentData::PBSchemaComponentData(const PBSchemaComponentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBSchemaComponentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.schema_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.schema_id_ = from._impl_.schema_id_;
  // @@protoc_insertion_point(copy_constructor:PBSchemaComponentData)
}

inline void PBSchemaComponentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.schema_id_){0u}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBSchemaComponentData::~PBSchemaComponentData() {
  // @@protoc_insertion_point(destructor:PBSchemaComponentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBSchemaComponentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PBSchemaComponentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBSchemaComponentData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSchemaComponentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.schema_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBSchemaComponentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 schema_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_schema_id(&has_bits);
          _impl_.schema_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBSchemaComponentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSchemaComponentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 schema_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_schema_id(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSchemaComponentData)
  return target;
}

size_t PBSchemaComponentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSchemaComponentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 schema_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_schema_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBSchemaComponentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBSchemaComponentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBSchemaComponentData::GetClassData() const { return &_class_data_; }


void PBSchemaComponentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBSchemaComponentData*>(&to_msg);
  auto& from = static_cast<const PBSchemaComponentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBSchemaComponentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.schema_id_ = from._impl_.schema_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBSchemaComponentData::CopyFrom(const PBSchemaComponentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSchemaComponentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSchemaComponentData::IsInitialized() const {
  return true;
}

void PBSchemaComponentData::InternalSwap(PBSchemaComponentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.schema_id_, other->_impl_.schema_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBSchemaComponentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[4]);
}

// ===================================================================

class PBWorkerComponentDataHandle::_Internal {
 public:
};

PBWorkerComponentDataHandle::PBWorkerComponentDataHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PBWorkerComponentDataHandle)
}
PBWorkerComponentDataHandle::PBWorkerComponentDataHandle(const PBWorkerComponentDataHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PBWorkerComponentDataHandle* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PBWorkerComponentDataHandle)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerComponentDataHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerComponentDataHandle::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerComponentDataHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[5]);
}

// ===================================================================

class PBWorkerComponentData::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerComponentData>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchemaComponentData& schema_type(const PBWorkerComponentData* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorkerComponentDataHandle& user_handle(const PBWorkerComponentData* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchemaComponentData&
PBWorkerComponentData::_Internal::schema_type(const PBWorkerComponentData* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorkerComponentDataHandle&
PBWorkerComponentData::_Internal::user_handle(const PBWorkerComponentData* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorkerComponentData::PBWorkerComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerComponentData)
}
PBWorkerComponentData::PBWorkerComponentData(const PBWorkerComponentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerComponentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchemaComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorkerComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerComponentData)
}

inline void PBWorkerComponentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerComponentData::~PBWorkerComponentData() {
  // @@protoc_insertion_point(destructor:PBWorkerComponentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerComponentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorkerComponentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerComponentData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerComponentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerComponentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchemaComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorkerComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerComponentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerComponentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchemaComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerComponentData)
  return target;
}

size_t PBWorkerComponentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerComponentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchemaComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorkerComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerComponentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerComponentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerComponentData::GetClassData() const { return &_class_data_; }


void PBWorkerComponentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerComponentData*>(&to_msg);
  auto& from = static_cast<const PBWorkerComponentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerComponentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchemaComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorkerComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerComponentData::CopyFrom(const PBWorkerComponentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerComponentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerComponentData::IsInitialized() const {
  return true;
}

void PBWorkerComponentData::InternalSwap(PBWorkerComponentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerComponentData, _impl_.component_id_)
      + sizeof(PBWorkerComponentData::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerComponentData, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerComponentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[6]);
}

// ===================================================================

class PBWorkerEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerEntity>()._impl_._has_bits_);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorkerEntity::PBWorkerEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerEntity)
}
PBWorkerEntity::PBWorkerEntity(const PBWorkerEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){from._impl_.components_}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.component_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.component_count_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.component_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorkerEntity)
}

inline void PBWorkerEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){arena}
    , decltype(_impl_.entity_id_){int64_t{0}}
    , decltype(_impl_.component_count_){0u}
  };
}

PBWorkerEntity::~PBWorkerEntity() {
  // @@protoc_insertion_point(destructor:PBWorkerEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.~RepeatedPtrField();
}

void PBWorkerEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.component_count_) -
        reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.component_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity_id(&has_bits);
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_count(&has_bits);
          _impl_.component_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorkerComponentData components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_entity_id(), target);
  }

  // optional uint32 component_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_count(), target);
  }

  // repeated .PBWorkerComponentData components = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerEntity)
  return target;
}

size_t PBWorkerEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorkerComponentData components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 entity_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_entity_id());
    }

    // optional uint32 component_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerEntity::GetClassData() const { return &_class_data_; }


void PBWorkerEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerEntity*>(&to_msg);
  auto& from = static_cast<const PBWorkerEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.entity_id_ = from._impl_.entity_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.component_count_ = from._impl_.component_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerEntity::CopyFrom(const PBWorkerEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerEntity::IsInitialized() const {
  return true;
}

void PBWorkerEntity::InternalSwap(PBWorkerEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerEntity, _impl_.component_count_)
      + sizeof(PBWorkerEntity::_impl_.component_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerEntity, _impl_.entity_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[7]);
}

// ===================================================================

class PBWorkerComponentUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerComponentUpdate>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchemaComponentData& schema_type(const PBWorkerComponentUpdate* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorkerComponentDataHandle& user_handle(const PBWorkerComponentUpdate* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchemaComponentData&
PBWorkerComponentUpdate::_Internal::schema_type(const PBWorkerComponentUpdate* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorkerComponentDataHandle&
PBWorkerComponentUpdate::_Internal::user_handle(const PBWorkerComponentUpdate* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorkerComponentUpdate::PBWorkerComponentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerComponentUpdate)
}
PBWorkerComponentUpdate::PBWorkerComponentUpdate(const PBWorkerComponentUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerComponentUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchemaComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorkerComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerComponentUpdate)
}

inline void PBWorkerComponentUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerComponentUpdate::~PBWorkerComponentUpdate() {
  // @@protoc_insertion_point(destructor:PBWorkerComponentUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerComponentUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorkerComponentUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerComponentUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerComponentUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerComponentUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchemaComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorkerComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerComponentUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerComponentUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchemaComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerComponentUpdate)
  return target;
}

size_t PBWorkerComponentUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerComponentUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchemaComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorkerComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerComponentUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerComponentUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerComponentUpdate::GetClassData() const { return &_class_data_; }


void PBWorkerComponentUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerComponentUpdate*>(&to_msg);
  auto& from = static_cast<const PBWorkerComponentUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerComponentUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchemaComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorkerComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerComponentUpdate::CopyFrom(const PBWorkerComponentUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerComponentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerComponentUpdate::IsInitialized() const {
  return true;
}

void PBWorkerComponentUpdate::InternalSwap(PBWorkerComponentUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerComponentUpdate, _impl_.component_id_)
      + sizeof(PBWorkerComponentUpdate::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerComponentUpdate, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerComponentUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[8]);
}

// ===================================================================

class PBWorkerWorkerAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerWorkerAttributes>()._impl_._has_bits_);
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PBWorkerWorkerAttributes::PBWorkerWorkerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerWorkerAttributes)
}
PBWorkerWorkerAttributes::PBWorkerWorkerAttributes(const PBWorkerWorkerAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerWorkerAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.attribute_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attribute_count_ = from._impl_.attribute_count_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerWorkerAttributes)
}

inline void PBWorkerWorkerAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.attribute_count_){0u}
  };
}

PBWorkerWorkerAttributes::~PBWorkerWorkerAttributes() {
  // @@protoc_insertion_point(destructor:PBWorkerWorkerAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerWorkerAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
}

void PBWorkerWorkerAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerWorkerAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerWorkerAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.attribute_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerWorkerAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attribute_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_count(&has_bits);
          _impl_.attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerWorkerAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerWorkerAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 attribute_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_count(), target);
  }

  // repeated bytes attributes = 2;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_attributes(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerWorkerAttributes)
  return target;
}

size_t PBWorkerWorkerAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerWorkerAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributes_.size());
  for (int i = 0, n = _impl_.attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.attributes_.Get(i));
  }

  // optional uint32 attribute_count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerWorkerAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerWorkerAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerWorkerAttributes::GetClassData() const { return &_class_data_; }


void PBWorkerWorkerAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerWorkerAttributes*>(&to_msg);
  auto& from = static_cast<const PBWorkerWorkerAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerWorkerAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_attribute_count()) {
    _this->_internal_set_attribute_count(from._internal_attribute_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerWorkerAttributes::CopyFrom(const PBWorkerWorkerAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerWorkerAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerWorkerAttributes::IsInitialized() const {
  return true;
}

void PBWorkerWorkerAttributes::InternalSwap(PBWorkerWorkerAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  swap(_impl_.attribute_count_, other->_impl_.attribute_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerWorkerAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[9]);
}

// ===================================================================

class PBWorkerCommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerCommandRequest>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchemaComponentData& schema_type(const PBWorkerCommandRequest* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorkerComponentDataHandle& user_handle(const PBWorkerCommandRequest* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchemaComponentData&
PBWorkerCommandRequest::_Internal::schema_type(const PBWorkerCommandRequest* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorkerComponentDataHandle&
PBWorkerCommandRequest::_Internal::user_handle(const PBWorkerCommandRequest* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorkerCommandRequest::PBWorkerCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerCommandRequest)
}
PBWorkerCommandRequest::PBWorkerCommandRequest(const PBWorkerCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerCommandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchemaComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorkerComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerCommandRequest)
}

inline void PBWorkerCommandRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerCommandRequest::~PBWorkerCommandRequest() {
  // @@protoc_insertion_point(destructor:PBWorkerCommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorkerCommandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerCommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerCommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchemaComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorkerComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerCommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerCommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchemaComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerCommandRequest)
  return target;
}

size_t PBWorkerCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerCommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchemaComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorkerComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerCommandRequest::GetClassData() const { return &_class_data_; }


void PBWorkerCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerCommandRequest*>(&to_msg);
  auto& from = static_cast<const PBWorkerCommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerCommandRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchemaComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorkerComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerCommandRequest::CopyFrom(const PBWorkerCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerCommandRequest::IsInitialized() const {
  return true;
}

void PBWorkerCommandRequest::InternalSwap(PBWorkerCommandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerCommandRequest, _impl_.component_id_)
      + sizeof(PBWorkerCommandRequest::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerCommandRequest, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[10]);
}

// ===================================================================

class PBWorkerCommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorkerCommandResponse>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchemaComponentData& schema_type(const PBWorkerCommandResponse* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorkerComponentDataHandle& user_handle(const PBWorkerCommandResponse* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchemaComponentData&
PBWorkerCommandResponse::_Internal::schema_type(const PBWorkerCommandResponse* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorkerComponentDataHandle&
PBWorkerCommandResponse::_Internal::user_handle(const PBWorkerCommandResponse* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorkerCommandResponse::PBWorkerCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorkerCommandResponse)
}
PBWorkerCommandResponse::PBWorkerCommandResponse(const PBWorkerCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorkerCommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchemaComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorkerComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorkerCommandResponse)
}

inline void PBWorkerCommandResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorkerCommandResponse::~PBWorkerCommandResponse() {
  // @@protoc_insertion_point(destructor:PBWorkerCommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorkerCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorkerCommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorkerCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorkerCommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorkerCommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchemaComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorkerComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorkerCommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorkerCommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchemaComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorkerCommandResponse)
  return target;
}

size_t PBWorkerCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorkerCommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchemaComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorkerComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorkerCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorkerCommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorkerCommandResponse::GetClassData() const { return &_class_data_; }


void PBWorkerCommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorkerCommandResponse*>(&to_msg);
  auto& from = static_cast<const PBWorkerCommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorkerCommandResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchemaComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorkerComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorkerCommandResponse::CopyFrom(const PBWorkerCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorkerCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorkerCommandResponse::IsInitialized() const {
  return true;
}

void PBWorkerCommandResponse::InternalSwap(PBWorkerCommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorkerCommandResponse, _impl_.component_id_)
      + sizeof(PBWorkerCommandResponse::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorkerCommandResponse, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorkerCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBWorkerGaugeMetric*
Arena::CreateMaybeMessage< ::PBWorkerGaugeMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerGaugeMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerHistogramMetricBucket*
Arena::CreateMaybeMessage< ::PBWorkerHistogramMetricBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerHistogramMetricBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerHistogramMetric*
Arena::CreateMaybeMessage< ::PBWorkerHistogramMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerHistogramMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerMetrics*
Arena::CreateMaybeMessage< ::PBWorkerMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::PBSchemaComponentData*
Arena::CreateMaybeMessage< ::PBSchemaComponentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBSchemaComponentData >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerComponentDataHandle*
Arena::CreateMaybeMessage< ::PBWorkerComponentDataHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerComponentDataHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerComponentData*
Arena::CreateMaybeMessage< ::PBWorkerComponentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerComponentData >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerEntity*
Arena::CreateMaybeMessage< ::PBWorkerEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerComponentUpdate*
Arena::CreateMaybeMessage< ::PBWorkerComponentUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerComponentUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerWorkerAttributes*
Arena::CreateMaybeMessage< ::PBWorkerWorkerAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerWorkerAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerCommandRequest*
Arena::CreateMaybeMessage< ::PBWorkerCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorkerCommandResponse*
Arena::CreateMaybeMessage< ::PBWorkerCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorkerCommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
