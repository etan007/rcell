// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerData.proto

#include "WorkerData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PBWorker_GaugeMetric::PBWorker_GaugeMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0} {}
struct PBWorker_GaugeMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_GaugeMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_GaugeMetricDefaultTypeInternal() {}
  union {
    PBWorker_GaugeMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_GaugeMetricDefaultTypeInternal _PBWorker_GaugeMetric_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_HistogramMetricBucket::PBWorker_HistogramMetricBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upper_bound_)*/0
  , /*decltype(_impl_.samples_)*/0u} {}
struct PBWorker_HistogramMetricBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_HistogramMetricBucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_HistogramMetricBucketDefaultTypeInternal() {}
  union {
    PBWorker_HistogramMetricBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_HistogramMetricBucketDefaultTypeInternal _PBWorker_HistogramMetricBucket_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_HistogramMetric::PBWorker_HistogramMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_.bucket_count_)*/0u} {}
struct PBWorker_HistogramMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_HistogramMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_HistogramMetricDefaultTypeInternal() {}
  union {
    PBWorker_HistogramMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_HistogramMetricDefaultTypeInternal _PBWorker_HistogramMetric_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_Metrics::PBWorker_Metrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gauge_metrics_)*/{}
  , /*decltype(_impl_.histogram_metrics_)*/{}
  , /*decltype(_impl_.load_)*/0
  , /*decltype(_impl_.gauge_metric_count_)*/0u
  , /*decltype(_impl_.histogram_metric_count_)*/0u} {}
struct PBWorker_MetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_MetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_MetricsDefaultTypeInternal() {}
  union {
    PBWorker_Metrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_MetricsDefaultTypeInternal _PBWorker_Metrics_default_instance_;
PROTOBUF_CONSTEXPR PBSchema_ComponentData::PBSchema_ComponentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_id_)*/0u} {}
struct PBSchema_ComponentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBSchema_ComponentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBSchema_ComponentDataDefaultTypeInternal() {}
  union {
    PBSchema_ComponentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBSchema_ComponentDataDefaultTypeInternal _PBSchema_ComponentData_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_ComponentDataHandle::PBWorker_ComponentDataHandle(
    ::_pbi::ConstantInitialized) {}
struct PBWorker_ComponentDataHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_ComponentDataHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_ComponentDataHandleDefaultTypeInternal() {}
  union {
    PBWorker_ComponentDataHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_ComponentDataHandleDefaultTypeInternal _PBWorker_ComponentDataHandle_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_ComponentData::PBWorker_ComponentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorker_ComponentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_ComponentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_ComponentDataDefaultTypeInternal() {}
  union {
    PBWorker_ComponentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_ComponentDataDefaultTypeInternal _PBWorker_ComponentData_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_Entity::PBWorker_Entity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_.entity_id_)*/int64_t{0}
  , /*decltype(_impl_.component_count_)*/0u} {}
struct PBWorker_EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_EntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_EntityDefaultTypeInternal() {}
  union {
    PBWorker_Entity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_EntityDefaultTypeInternal _PBWorker_Entity_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_ComponentUpdate::PBWorker_ComponentUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorker_ComponentUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_ComponentUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_ComponentUpdateDefaultTypeInternal() {}
  union {
    PBWorker_ComponentUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_ComponentUpdateDefaultTypeInternal _PBWorker_ComponentUpdate_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_WorkerAttributes::PBWorker_WorkerAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.attribute_count_)*/0u} {}
struct PBWorker_WorkerAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_WorkerAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_WorkerAttributesDefaultTypeInternal() {}
  union {
    PBWorker_WorkerAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_WorkerAttributesDefaultTypeInternal _PBWorker_WorkerAttributes_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_CommandRequest::PBWorker_CommandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorker_CommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_CommandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_CommandRequestDefaultTypeInternal() {}
  union {
    PBWorker_CommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_CommandRequestDefaultTypeInternal _PBWorker_CommandRequest_default_instance_;
PROTOBUF_CONSTEXPR PBWorker_CommandResponse::PBWorker_CommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_type_)*/nullptr
  , /*decltype(_impl_.user_handle_)*/nullptr
  , /*decltype(_impl_.component_id_)*/0u} {}
struct PBWorker_CommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBWorker_CommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBWorker_CommandResponseDefaultTypeInternal() {}
  union {
    PBWorker_CommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBWorker_CommandResponseDefaultTypeInternal _PBWorker_CommandResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_WorkerData_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_WorkerData_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_WorkerData_2eproto = nullptr;

const uint32_t TableStruct_WorkerData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PBWorker_GaugeMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_GaugeMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_GaugeMetric, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_GaugeMetric, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetricBucket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetricBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetricBucket, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetricBucket, _impl_.samples_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _impl_.bucket_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_HistogramMetric, _impl_.buckets_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_.gauge_metric_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_.gauge_metrics_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_.histogram_metric_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Metrics, _impl_.histogram_metrics_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBSchema_ComponentData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBSchema_ComponentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBSchema_ComponentData, _impl_.schema_id_),
  PROTOBUF_FIELD_OFFSET(::PBSchema_ComponentData, _impl_.data_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentDataHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentData, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorker_Entity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_Entity, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Entity, _impl_.component_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_Entity, _impl_.components_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_ComponentUpdate, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorker_WorkerAttributes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_WorkerAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_WorkerAttributes, _impl_.attribute_count_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_WorkerAttributes, _impl_.attributes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandRequest, _impl_.user_handle_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _impl_.schema_type_),
  PROTOBUF_FIELD_OFFSET(::PBWorker_CommandResponse, _impl_.user_handle_),
  0,
  3,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::PBWorker_GaugeMetric)},
  { 10, 18, -1, sizeof(::PBWorker_HistogramMetricBucket)},
  { 20, 30, -1, sizeof(::PBWorker_HistogramMetric)},
  { 34, 45, -1, sizeof(::PBWorker_Metrics)},
  { 50, 58, -1, sizeof(::PBSchema_ComponentData)},
  { 60, -1, -1, sizeof(::PBWorker_ComponentDataHandle)},
  { 66, 76, -1, sizeof(::PBWorker_ComponentData)},
  { 80, 89, -1, sizeof(::PBWorker_Entity)},
  { 92, 102, -1, sizeof(::PBWorker_ComponentUpdate)},
  { 106, 114, -1, sizeof(::PBWorker_WorkerAttributes)},
  { 116, 126, -1, sizeof(::PBWorker_CommandRequest)},
  { 130, 140, -1, sizeof(::PBWorker_CommandResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PBWorker_GaugeMetric_default_instance_._instance,
  &::_PBWorker_HistogramMetricBucket_default_instance_._instance,
  &::_PBWorker_HistogramMetric_default_instance_._instance,
  &::_PBWorker_Metrics_default_instance_._instance,
  &::_PBSchema_ComponentData_default_instance_._instance,
  &::_PBWorker_ComponentDataHandle_default_instance_._instance,
  &::_PBWorker_ComponentData_default_instance_._instance,
  &::_PBWorker_Entity_default_instance_._instance,
  &::_PBWorker_ComponentUpdate_default_instance_._instance,
  &::_PBWorker_WorkerAttributes_default_instance_._instance,
  &::_PBWorker_CommandRequest_default_instance_._instance,
  &::_PBWorker_CommandResponse_default_instance_._instance,
};

const char descriptor_table_protodef_WorkerData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020WorkerData.proto\"2\n\024PBWorker_GaugeMetr"
  "ic\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\"F\n\036PBWork"
  "er_HistogramMetricBucket\022\023\n\013upper_bound\030"
  "\001 \001(\001\022\017\n\007samples\030\002 \001(\r\"|\n\030PBWorker_Histo"
  "gramMetric\022\013\n\003key\030\001 \001(\t\022\013\n\003sum\030\002 \001(\001\022\024\n\014"
  "bucket_count\030\003 \001(\r\0220\n\007buckets\030\004 \003(\0132\037.PB"
  "Worker_HistogramMetricBucket\"\300\001\n\020PBWorke"
  "r_Metrics\022\014\n\004load\030\001 \001(\001\022\032\n\022gauge_metric_"
  "count\030\002 \001(\r\022,\n\rgauge_metrics\030\003 \003(\0132\025.PBW"
  "orker_GaugeMetric\022\036\n\026histogram_metric_co"
  "unt\030\004 \001(\r\0224\n\021histogram_metrics\030\005 \003(\0132\031.P"
  "BWorker_HistogramMetric\"9\n\026PBSchema_Comp"
  "onentData\022\021\n\tschema_id\030\001 \001(\r\022\014\n\004data\030\002 \001"
  "(\014\"\036\n\034PBWorker_ComponentDataHandle\"\242\001\n\026P"
  "BWorker_ComponentData\022\020\n\010reserved\030\001 \001(\014\022"
  "\024\n\014component_id\030\002 \001(\r\022,\n\013schema_type\030\003 \001"
  "(\0132\027.PBSchema_ComponentData\0222\n\013user_hand"
  "le\030\004 \001(\0132\035.PBWorker_ComponentDataHandle\""
  "j\n\017PBWorker_Entity\022\021\n\tentity_id\030\001 \001(\003\022\027\n"
  "\017component_count\030\002 \001(\r\022+\n\ncomponents\030\003 \003"
  "(\0132\027.PBWorker_ComponentData\"\244\001\n\030PBWorker"
  "_ComponentUpdate\022\020\n\010reserved\030\001 \001(\014\022\024\n\014co"
  "mponent_id\030\002 \001(\r\022,\n\013schema_type\030\003 \001(\0132\027."
  "PBSchema_ComponentData\0222\n\013user_handle\030\004 "
  "\001(\0132\035.PBWorker_ComponentDataHandle\"H\n\031PB"
  "Worker_WorkerAttributes\022\027\n\017attribute_cou"
  "nt\030\001 \001(\r\022\022\n\nattributes\030\002 \003(\014\"\243\001\n\027PBWorke"
  "r_CommandRequest\022\020\n\010reserved\030\001 \001(\014\022\024\n\014co"
  "mponent_id\030\002 \001(\r\022,\n\013schema_type\030\003 \001(\0132\027."
  "PBSchema_ComponentData\0222\n\013user_handle\030\004 "
  "\001(\0132\035.PBWorker_ComponentDataHandle\"\244\001\n\030P"
  "BWorker_CommandResponse\022\020\n\010reserved\030\001 \001("
  "\014\022\024\n\014component_id\030\002 \001(\r\022,\n\013schema_type\030\003"
  " \001(\0132\027.PBSchema_ComponentData\0222\n\013user_ha"
  "ndle\030\004 \001(\0132\035.PBWorker_ComponentDataHandl"
  "e*\231\002\n\023PBWorker_StatusCode\022\036\n\032WORKER_STAT"
  "US_CODE_SUCCESS\020\001\022\036\n\032WORKER_STATUS_CODE_"
  "TIMEOUT\020\002\022 \n\034WORKER_STATUS_CODE_NOT_FOUN"
  "D\020\003\022%\n!WORKER_STATUS_CODE_AUTHORITY_LOST"
  "\020\004\022(\n$WORKER_STATUS_CODE_PERMISSION_DENI"
  "ED\020\005\022(\n$WORKER_STATUS_CODE_APPLICATION_E"
  "RROR\020\006\022%\n!WORKER_STATUS_CODE_INTERNAL_ER"
  "ROR\020\007*\216\001\n\022PBWorker_Authority\022&\n\"WORKER_A"
  "UTHORITY_NOT_AUTHORITATIVE\020\000\022\"\n\036WORKER_A"
  "UTHORITY_AUTHORITATIVE\020\001\022,\n(WORKER_AUTHO"
  "RITY_AUTHORITY_LOSS_IMMINENT\020\002"
  ;
static ::_pbi::once_flag descriptor_table_WorkerData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_WorkerData_2eproto = {
    false, false, 1830, descriptor_table_protodef_WorkerData_2eproto,
    "WorkerData.proto",
    &descriptor_table_WorkerData_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_WorkerData_2eproto::offsets,
    file_level_metadata_WorkerData_2eproto, file_level_enum_descriptors_WorkerData_2eproto,
    file_level_service_descriptors_WorkerData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_WorkerData_2eproto_getter() {
  return &descriptor_table_WorkerData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_WorkerData_2eproto(&descriptor_table_WorkerData_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorker_StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WorkerData_2eproto);
  return file_level_enum_descriptors_WorkerData_2eproto[0];
}
bool PBWorker_StatusCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorker_Authority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WorkerData_2eproto);
  return file_level_enum_descriptors_WorkerData_2eproto[1];
}
bool PBWorker_Authority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PBWorker_GaugeMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_GaugeMetric>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorker_GaugeMetric::PBWorker_GaugeMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_GaugeMetric)
}
PBWorker_GaugeMetric::PBWorker_GaugeMetric(const PBWorker_GaugeMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_GaugeMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_GaugeMetric)
}

inline void PBWorker_GaugeMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_GaugeMetric::~PBWorker_GaugeMetric() {
  // @@protoc_insertion_point(destructor:PBWorker_GaugeMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_GaugeMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void PBWorker_GaugeMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_GaugeMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_GaugeMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_GaugeMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PBWorker_GaugeMetric.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_GaugeMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_GaugeMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PBWorker_GaugeMetric.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_GaugeMetric)
  return target;
}

size_t PBWorker_GaugeMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_GaugeMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_GaugeMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_GaugeMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_GaugeMetric::GetClassData() const { return &_class_data_; }


void PBWorker_GaugeMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_GaugeMetric*>(&to_msg);
  auto& from = static_cast<const PBWorker_GaugeMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_GaugeMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_GaugeMetric::CopyFrom(const PBWorker_GaugeMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_GaugeMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_GaugeMetric::IsInitialized() const {
  return true;
}

void PBWorker_GaugeMetric::InternalSwap(PBWorker_GaugeMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_GaugeMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[0]);
}

// ===================================================================

class PBWorker_HistogramMetricBucket::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_HistogramMetricBucket>()._impl_._has_bits_);
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorker_HistogramMetricBucket::PBWorker_HistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_HistogramMetricBucket)
}
PBWorker_HistogramMetricBucket::PBWorker_HistogramMetricBucket(const PBWorker_HistogramMetricBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_HistogramMetricBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_bound_){}
    , decltype(_impl_.samples_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upper_bound_, &from._impl_.upper_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.samples_) -
    reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.samples_));
  // @@protoc_insertion_point(copy_constructor:PBWorker_HistogramMetricBucket)
}

inline void PBWorker_HistogramMetricBucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_bound_){0}
    , decltype(_impl_.samples_){0u}
  };
}

PBWorker_HistogramMetricBucket::~PBWorker_HistogramMetricBucket() {
  // @@protoc_insertion_point(destructor:PBWorker_HistogramMetricBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_HistogramMetricBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PBWorker_HistogramMetricBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_HistogramMetricBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_HistogramMetricBucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.upper_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.samples_) -
        reinterpret_cast<char*>(&_impl_.upper_bound_)) + sizeof(_impl_.samples_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_HistogramMetricBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double upper_bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_samples(&has_bits);
          _impl_.samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_HistogramMetricBucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_HistogramMetricBucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double upper_bound = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_upper_bound(), target);
  }

  // optional uint32 samples = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_HistogramMetricBucket)
  return target;
}

size_t PBWorker_HistogramMetricBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_HistogramMetricBucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double upper_bound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 samples = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_samples());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_HistogramMetricBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_HistogramMetricBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_HistogramMetricBucket::GetClassData() const { return &_class_data_; }


void PBWorker_HistogramMetricBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_HistogramMetricBucket*>(&to_msg);
  auto& from = static_cast<const PBWorker_HistogramMetricBucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_HistogramMetricBucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.samples_ = from._impl_.samples_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_HistogramMetricBucket::CopyFrom(const PBWorker_HistogramMetricBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_HistogramMetricBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_HistogramMetricBucket::IsInitialized() const {
  return true;
}

void PBWorker_HistogramMetricBucket::InternalSwap(PBWorker_HistogramMetricBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_HistogramMetricBucket, _impl_.samples_)
      + sizeof(PBWorker_HistogramMetricBucket::_impl_.samples_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_HistogramMetricBucket, _impl_.upper_bound_)>(
          reinterpret_cast<char*>(&_impl_.upper_bound_),
          reinterpret_cast<char*>(&other->_impl_.upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_HistogramMetricBucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[1]);
}

// ===================================================================

class PBWorker_HistogramMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_HistogramMetric>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bucket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PBWorker_HistogramMetric::PBWorker_HistogramMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_HistogramMetric)
}
PBWorker_HistogramMetric::PBWorker_HistogramMetric(const PBWorker_HistogramMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_HistogramMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){from._impl_.buckets_}
    , decltype(_impl_.key_){}
    , decltype(_impl_.sum_){}
    , decltype(_impl_.bucket_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sum_, &from._impl_.sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bucket_count_) -
    reinterpret_cast<char*>(&_impl_.sum_)) + sizeof(_impl_.bucket_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorker_HistogramMetric)
}

inline void PBWorker_HistogramMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){arena}
    , decltype(_impl_.key_){}
    , decltype(_impl_.sum_){0}
    , decltype(_impl_.bucket_count_){0u}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_HistogramMetric::~PBWorker_HistogramMetric() {
  // @@protoc_insertion_point(destructor:PBWorker_HistogramMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_HistogramMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buckets_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void PBWorker_HistogramMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_HistogramMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_HistogramMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buckets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.sum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bucket_count_) -
        reinterpret_cast<char*>(&_impl_.sum_)) + sizeof(_impl_.bucket_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_HistogramMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PBWorker_HistogramMetric.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sum(&has_bits);
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bucket_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bucket_count(&has_bits);
          _impl_.bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorker_HistogramMetricBucket buckets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_HistogramMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_HistogramMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PBWorker_HistogramMetric.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional double sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_sum(), target);
  }

  // optional uint32 bucket_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bucket_count(), target);
  }

  // repeated .PBWorker_HistogramMetricBucket buckets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_buckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_HistogramMetric)
  return target;
}

size_t PBWorker_HistogramMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_HistogramMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorker_HistogramMetricBucket buckets = 4;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->_impl_.buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional double sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 bucket_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_HistogramMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_HistogramMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_HistogramMetric::GetClassData() const { return &_class_data_; }


void PBWorker_HistogramMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_HistogramMetric*>(&to_msg);
  auto& from = static_cast<const PBWorker_HistogramMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_HistogramMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buckets_.MergeFrom(from._impl_.buckets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sum_ = from._impl_.sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bucket_count_ = from._impl_.bucket_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_HistogramMetric::CopyFrom(const PBWorker_HistogramMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_HistogramMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_HistogramMetric::IsInitialized() const {
  return true;
}

void PBWorker_HistogramMetric::InternalSwap(PBWorker_HistogramMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buckets_.InternalSwap(&other->_impl_.buckets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_HistogramMetric, _impl_.bucket_count_)
      + sizeof(PBWorker_HistogramMetric::_impl_.bucket_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_HistogramMetric, _impl_.sum_)>(
          reinterpret_cast<char*>(&_impl_.sum_),
          reinterpret_cast<char*>(&other->_impl_.sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_HistogramMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[2]);
}

// ===================================================================

class PBWorker_Metrics::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_Metrics>()._impl_._has_bits_);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gauge_metric_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_histogram_metric_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PBWorker_Metrics::PBWorker_Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_Metrics)
}
PBWorker_Metrics::PBWorker_Metrics(const PBWorker_Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_Metrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gauge_metrics_){from._impl_.gauge_metrics_}
    , decltype(_impl_.histogram_metrics_){from._impl_.histogram_metrics_}
    , decltype(_impl_.load_){}
    , decltype(_impl_.gauge_metric_count_){}
    , decltype(_impl_.histogram_metric_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.load_, &from._impl_.load_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.histogram_metric_count_) -
    reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.histogram_metric_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorker_Metrics)
}

inline void PBWorker_Metrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gauge_metrics_){arena}
    , decltype(_impl_.histogram_metrics_){arena}
    , decltype(_impl_.load_){0}
    , decltype(_impl_.gauge_metric_count_){0u}
    , decltype(_impl_.histogram_metric_count_){0u}
  };
}

PBWorker_Metrics::~PBWorker_Metrics() {
  // @@protoc_insertion_point(destructor:PBWorker_Metrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gauge_metrics_.~RepeatedPtrField();
  _impl_.histogram_metrics_.~RepeatedPtrField();
}

void PBWorker_Metrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_Metrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gauge_metrics_.Clear();
  _impl_.histogram_metrics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.histogram_metric_count_) -
        reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.histogram_metric_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_Metrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_load(&has_bits);
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gauge_metric_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gauge_metric_count(&has_bits);
          _impl_.gauge_metric_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorker_GaugeMetric gauge_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gauge_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 histogram_metric_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_histogram_metric_count(&has_bits);
          _impl_.histogram_metric_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorker_HistogramMetric histogram_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histogram_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_Metrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_Metrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_load(), target);
  }

  // optional uint32 gauge_metric_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gauge_metric_count(), target);
  }

  // repeated .PBWorker_GaugeMetric gauge_metrics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gauge_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_gauge_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 histogram_metric_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_histogram_metric_count(), target);
  }

  // repeated .PBWorker_HistogramMetric histogram_metrics = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histogram_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_histogram_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_Metrics)
  return target;
}

size_t PBWorker_Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_Metrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorker_GaugeMetric gauge_metrics = 3;
  total_size += 1UL * this->_internal_gauge_metrics_size();
  for (const auto& msg : this->_impl_.gauge_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PBWorker_HistogramMetric histogram_metrics = 5;
  total_size += 1UL * this->_internal_histogram_metrics_size();
  for (const auto& msg : this->_impl_.histogram_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double load = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 gauge_metric_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gauge_metric_count());
    }

    // optional uint32 histogram_metric_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_histogram_metric_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_Metrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_Metrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_Metrics::GetClassData() const { return &_class_data_; }


void PBWorker_Metrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_Metrics*>(&to_msg);
  auto& from = static_cast<const PBWorker_Metrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_Metrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gauge_metrics_.MergeFrom(from._impl_.gauge_metrics_);
  _this->_impl_.histogram_metrics_.MergeFrom(from._impl_.histogram_metrics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.load_ = from._impl_.load_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gauge_metric_count_ = from._impl_.gauge_metric_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.histogram_metric_count_ = from._impl_.histogram_metric_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_Metrics::CopyFrom(const PBWorker_Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_Metrics::IsInitialized() const {
  return true;
}

void PBWorker_Metrics::InternalSwap(PBWorker_Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gauge_metrics_.InternalSwap(&other->_impl_.gauge_metrics_);
  _impl_.histogram_metrics_.InternalSwap(&other->_impl_.histogram_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_Metrics, _impl_.histogram_metric_count_)
      + sizeof(PBWorker_Metrics::_impl_.histogram_metric_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_Metrics, _impl_.load_)>(
          reinterpret_cast<char*>(&_impl_.load_),
          reinterpret_cast<char*>(&other->_impl_.load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_Metrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[3]);
}

// ===================================================================

class PBSchema_ComponentData::_Internal {
 public:
  using HasBits = decltype(std::declval<PBSchema_ComponentData>()._impl_._has_bits_);
  static void set_has_schema_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PBSchema_ComponentData::PBSchema_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBSchema_ComponentData)
}
PBSchema_ComponentData::PBSchema_ComponentData(const PBSchema_ComponentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBSchema_ComponentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.schema_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.schema_id_ = from._impl_.schema_id_;
  // @@protoc_insertion_point(copy_constructor:PBSchema_ComponentData)
}

inline void PBSchema_ComponentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.schema_id_){0u}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBSchema_ComponentData::~PBSchema_ComponentData() {
  // @@protoc_insertion_point(destructor:PBSchema_ComponentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBSchema_ComponentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PBSchema_ComponentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBSchema_ComponentData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSchema_ComponentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.schema_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBSchema_ComponentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 schema_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_schema_id(&has_bits);
          _impl_.schema_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBSchema_ComponentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBSchema_ComponentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 schema_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_schema_id(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBSchema_ComponentData)
  return target;
}

size_t PBSchema_ComponentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSchema_ComponentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 schema_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_schema_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBSchema_ComponentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBSchema_ComponentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBSchema_ComponentData::GetClassData() const { return &_class_data_; }


void PBSchema_ComponentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBSchema_ComponentData*>(&to_msg);
  auto& from = static_cast<const PBSchema_ComponentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBSchema_ComponentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.schema_id_ = from._impl_.schema_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBSchema_ComponentData::CopyFrom(const PBSchema_ComponentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSchema_ComponentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSchema_ComponentData::IsInitialized() const {
  return true;
}

void PBSchema_ComponentData::InternalSwap(PBSchema_ComponentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.schema_id_, other->_impl_.schema_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBSchema_ComponentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[4]);
}

// ===================================================================

class PBWorker_ComponentDataHandle::_Internal {
 public:
};

PBWorker_ComponentDataHandle::PBWorker_ComponentDataHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PBWorker_ComponentDataHandle)
}
PBWorker_ComponentDataHandle::PBWorker_ComponentDataHandle(const PBWorker_ComponentDataHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PBWorker_ComponentDataHandle* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PBWorker_ComponentDataHandle)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_ComponentDataHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_ComponentDataHandle::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_ComponentDataHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[5]);
}

// ===================================================================

class PBWorker_ComponentData::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_ComponentData>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchema_ComponentData& schema_type(const PBWorker_ComponentData* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorker_ComponentDataHandle& user_handle(const PBWorker_ComponentData* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchema_ComponentData&
PBWorker_ComponentData::_Internal::schema_type(const PBWorker_ComponentData* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorker_ComponentDataHandle&
PBWorker_ComponentData::_Internal::user_handle(const PBWorker_ComponentData* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorker_ComponentData::PBWorker_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_ComponentData)
}
PBWorker_ComponentData::PBWorker_ComponentData(const PBWorker_ComponentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_ComponentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchema_ComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorker_ComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_ComponentData)
}

inline void PBWorker_ComponentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_ComponentData::~PBWorker_ComponentData() {
  // @@protoc_insertion_point(destructor:PBWorker_ComponentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_ComponentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorker_ComponentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_ComponentData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_ComponentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_ComponentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchema_ComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorker_ComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_ComponentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_ComponentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchema_ComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_ComponentData)
  return target;
}

size_t PBWorker_ComponentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_ComponentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchema_ComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorker_ComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_ComponentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_ComponentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_ComponentData::GetClassData() const { return &_class_data_; }


void PBWorker_ComponentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_ComponentData*>(&to_msg);
  auto& from = static_cast<const PBWorker_ComponentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_ComponentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchema_ComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorker_ComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_ComponentData::CopyFrom(const PBWorker_ComponentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_ComponentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_ComponentData::IsInitialized() const {
  return true;
}

void PBWorker_ComponentData::InternalSwap(PBWorker_ComponentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_ComponentData, _impl_.component_id_)
      + sizeof(PBWorker_ComponentData::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_ComponentData, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_ComponentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[6]);
}

// ===================================================================

class PBWorker_Entity::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_Entity>()._impl_._has_bits_);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PBWorker_Entity::PBWorker_Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_Entity)
}
PBWorker_Entity::PBWorker_Entity(const PBWorker_Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_Entity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){from._impl_.components_}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.component_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.component_count_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.component_count_));
  // @@protoc_insertion_point(copy_constructor:PBWorker_Entity)
}

inline void PBWorker_Entity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){arena}
    , decltype(_impl_.entity_id_){int64_t{0}}
    , decltype(_impl_.component_count_){0u}
  };
}

PBWorker_Entity::~PBWorker_Entity() {
  // @@protoc_insertion_point(destructor:PBWorker_Entity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_Entity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.~RepeatedPtrField();
}

void PBWorker_Entity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_Entity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.component_count_) -
        reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.component_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_Entity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity_id(&has_bits);
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_count(&has_bits);
          _impl_.component_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PBWorker_ComponentData components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_Entity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_Entity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_entity_id(), target);
  }

  // optional uint32 component_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_count(), target);
  }

  // repeated .PBWorker_ComponentData components = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_Entity)
  return target;
}

size_t PBWorker_Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_Entity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PBWorker_ComponentData components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 entity_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_entity_id());
    }

    // optional uint32 component_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_Entity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_Entity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_Entity::GetClassData() const { return &_class_data_; }


void PBWorker_Entity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_Entity*>(&to_msg);
  auto& from = static_cast<const PBWorker_Entity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_Entity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.entity_id_ = from._impl_.entity_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.component_count_ = from._impl_.component_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_Entity::CopyFrom(const PBWorker_Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_Entity::IsInitialized() const {
  return true;
}

void PBWorker_Entity::InternalSwap(PBWorker_Entity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_Entity, _impl_.component_count_)
      + sizeof(PBWorker_Entity::_impl_.component_count_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_Entity, _impl_.entity_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[7]);
}

// ===================================================================

class PBWorker_ComponentUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_ComponentUpdate>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchema_ComponentData& schema_type(const PBWorker_ComponentUpdate* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorker_ComponentDataHandle& user_handle(const PBWorker_ComponentUpdate* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchema_ComponentData&
PBWorker_ComponentUpdate::_Internal::schema_type(const PBWorker_ComponentUpdate* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorker_ComponentDataHandle&
PBWorker_ComponentUpdate::_Internal::user_handle(const PBWorker_ComponentUpdate* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorker_ComponentUpdate::PBWorker_ComponentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_ComponentUpdate)
}
PBWorker_ComponentUpdate::PBWorker_ComponentUpdate(const PBWorker_ComponentUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_ComponentUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchema_ComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorker_ComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_ComponentUpdate)
}

inline void PBWorker_ComponentUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_ComponentUpdate::~PBWorker_ComponentUpdate() {
  // @@protoc_insertion_point(destructor:PBWorker_ComponentUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_ComponentUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorker_ComponentUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_ComponentUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_ComponentUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_ComponentUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchema_ComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorker_ComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_ComponentUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_ComponentUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchema_ComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_ComponentUpdate)
  return target;
}

size_t PBWorker_ComponentUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_ComponentUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchema_ComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorker_ComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_ComponentUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_ComponentUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_ComponentUpdate::GetClassData() const { return &_class_data_; }


void PBWorker_ComponentUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_ComponentUpdate*>(&to_msg);
  auto& from = static_cast<const PBWorker_ComponentUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_ComponentUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchema_ComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorker_ComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_ComponentUpdate::CopyFrom(const PBWorker_ComponentUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_ComponentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_ComponentUpdate::IsInitialized() const {
  return true;
}

void PBWorker_ComponentUpdate::InternalSwap(PBWorker_ComponentUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_ComponentUpdate, _impl_.component_id_)
      + sizeof(PBWorker_ComponentUpdate::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_ComponentUpdate, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_ComponentUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[8]);
}

// ===================================================================

class PBWorker_WorkerAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_WorkerAttributes>()._impl_._has_bits_);
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PBWorker_WorkerAttributes::PBWorker_WorkerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_WorkerAttributes)
}
PBWorker_WorkerAttributes::PBWorker_WorkerAttributes(const PBWorker_WorkerAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_WorkerAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.attribute_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attribute_count_ = from._impl_.attribute_count_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_WorkerAttributes)
}

inline void PBWorker_WorkerAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.attribute_count_){0u}
  };
}

PBWorker_WorkerAttributes::~PBWorker_WorkerAttributes() {
  // @@protoc_insertion_point(destructor:PBWorker_WorkerAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_WorkerAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
}

void PBWorker_WorkerAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_WorkerAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_WorkerAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.attribute_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_WorkerAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attribute_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_count(&has_bits);
          _impl_.attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_WorkerAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_WorkerAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 attribute_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_count(), target);
  }

  // repeated bytes attributes = 2;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_attributes(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_WorkerAttributes)
  return target;
}

size_t PBWorker_WorkerAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_WorkerAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributes_.size());
  for (int i = 0, n = _impl_.attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.attributes_.Get(i));
  }

  // optional uint32 attribute_count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_WorkerAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_WorkerAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_WorkerAttributes::GetClassData() const { return &_class_data_; }


void PBWorker_WorkerAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_WorkerAttributes*>(&to_msg);
  auto& from = static_cast<const PBWorker_WorkerAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_WorkerAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_attribute_count()) {
    _this->_internal_set_attribute_count(from._internal_attribute_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_WorkerAttributes::CopyFrom(const PBWorker_WorkerAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_WorkerAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_WorkerAttributes::IsInitialized() const {
  return true;
}

void PBWorker_WorkerAttributes::InternalSwap(PBWorker_WorkerAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  swap(_impl_.attribute_count_, other->_impl_.attribute_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_WorkerAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[9]);
}

// ===================================================================

class PBWorker_CommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_CommandRequest>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchema_ComponentData& schema_type(const PBWorker_CommandRequest* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorker_ComponentDataHandle& user_handle(const PBWorker_CommandRequest* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchema_ComponentData&
PBWorker_CommandRequest::_Internal::schema_type(const PBWorker_CommandRequest* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorker_ComponentDataHandle&
PBWorker_CommandRequest::_Internal::user_handle(const PBWorker_CommandRequest* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorker_CommandRequest::PBWorker_CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_CommandRequest)
}
PBWorker_CommandRequest::PBWorker_CommandRequest(const PBWorker_CommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_CommandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchema_ComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorker_ComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_CommandRequest)
}

inline void PBWorker_CommandRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_CommandRequest::~PBWorker_CommandRequest() {
  // @@protoc_insertion_point(destructor:PBWorker_CommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_CommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorker_CommandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_CommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_CommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchema_ComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorker_ComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_CommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_CommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchema_ComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_CommandRequest)
  return target;
}

size_t PBWorker_CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_CommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchema_ComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorker_ComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_CommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_CommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_CommandRequest::GetClassData() const { return &_class_data_; }


void PBWorker_CommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_CommandRequest*>(&to_msg);
  auto& from = static_cast<const PBWorker_CommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_CommandRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchema_ComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorker_ComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_CommandRequest::CopyFrom(const PBWorker_CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_CommandRequest::IsInitialized() const {
  return true;
}

void PBWorker_CommandRequest::InternalSwap(PBWorker_CommandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_CommandRequest, _impl_.component_id_)
      + sizeof(PBWorker_CommandRequest::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_CommandRequest, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_CommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[10]);
}

// ===================================================================

class PBWorker_CommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PBWorker_CommandResponse>()._impl_._has_bits_);
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PBSchema_ComponentData& schema_type(const PBWorker_CommandResponse* msg);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PBWorker_ComponentDataHandle& user_handle(const PBWorker_CommandResponse* msg);
  static void set_has_user_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PBSchema_ComponentData&
PBWorker_CommandResponse::_Internal::schema_type(const PBWorker_CommandResponse* msg) {
  return *msg->_impl_.schema_type_;
}
const ::PBWorker_ComponentDataHandle&
PBWorker_CommandResponse::_Internal::user_handle(const PBWorker_CommandResponse* msg) {
  return *msg->_impl_.user_handle_;
}
PBWorker_CommandResponse::PBWorker_CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PBWorker_CommandResponse)
}
PBWorker_CommandResponse::PBWorker_CommandResponse(const PBWorker_CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PBWorker_CommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reserved()) {
    _this->_impl_.reserved_.Set(from._internal_reserved(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_schema_type()) {
    _this->_impl_.schema_type_ = new ::PBSchema_ComponentData(*from._impl_.schema_type_);
  }
  if (from._internal_has_user_handle()) {
    _this->_impl_.user_handle_ = new ::PBWorker_ComponentDataHandle(*from._impl_.user_handle_);
  }
  _this->_impl_.component_id_ = from._impl_.component_id_;
  // @@protoc_insertion_point(copy_constructor:PBWorker_CommandResponse)
}

inline void PBWorker_CommandResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.schema_type_){nullptr}
    , decltype(_impl_.user_handle_){nullptr}
    , decltype(_impl_.component_id_){0u}
  };
  _impl_.reserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBWorker_CommandResponse::~PBWorker_CommandResponse() {
  // @@protoc_insertion_point(destructor:PBWorker_CommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBWorker_CommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reserved_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schema_type_;
  if (this != internal_default_instance()) delete _impl_.user_handle_;
}

void PBWorker_CommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBWorker_CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PBWorker_CommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.schema_type_ != nullptr);
      _impl_.schema_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_handle_ != nullptr);
      _impl_.user_handle_->Clear();
    }
  }
  _impl_.component_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBWorker_CommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_component_id(&has_bits);
          _impl_.component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBSchema_ComponentData schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PBWorker_ComponentDataHandle user_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBWorker_CommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBWorker_CommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes reserved = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reserved(), target);
  }

  // optional uint32 component_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_component_id(), target);
  }

  // optional .PBSchema_ComponentData schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schema_type(this),
        _Internal::schema_type(this).GetCachedSize(), target, stream);
  }

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_handle(this),
        _Internal::user_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBWorker_CommandResponse)
  return target;
}

size_t PBWorker_CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBWorker_CommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes reserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reserved());
    }

    // optional .PBSchema_ComponentData schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schema_type_);
    }

    // optional .PBWorker_ComponentDataHandle user_handle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_handle_);
    }

    // optional uint32 component_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBWorker_CommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PBWorker_CommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBWorker_CommandResponse::GetClassData() const { return &_class_data_; }


void PBWorker_CommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PBWorker_CommandResponse*>(&to_msg);
  auto& from = static_cast<const PBWorker_CommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PBWorker_CommandResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reserved(from._internal_reserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_schema_type()->::PBSchema_ComponentData::MergeFrom(
          from._internal_schema_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_handle()->::PBWorker_ComponentDataHandle::MergeFrom(
          from._internal_user_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.component_id_ = from._impl_.component_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBWorker_CommandResponse::CopyFrom(const PBWorker_CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBWorker_CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorker_CommandResponse::IsInitialized() const {
  return true;
}

void PBWorker_CommandResponse::InternalSwap(PBWorker_CommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reserved_, lhs_arena,
      &other->_impl_.reserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBWorker_CommandResponse, _impl_.component_id_)
      + sizeof(PBWorker_CommandResponse::_impl_.component_id_)
      - PROTOBUF_FIELD_OFFSET(PBWorker_CommandResponse, _impl_.schema_type_)>(
          reinterpret_cast<char*>(&_impl_.schema_type_),
          reinterpret_cast<char*>(&other->_impl_.schema_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBWorker_CommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_WorkerData_2eproto_getter, &descriptor_table_WorkerData_2eproto_once,
      file_level_metadata_WorkerData_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBWorker_GaugeMetric*
Arena::CreateMaybeMessage< ::PBWorker_GaugeMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_GaugeMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_HistogramMetricBucket*
Arena::CreateMaybeMessage< ::PBWorker_HistogramMetricBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_HistogramMetricBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_HistogramMetric*
Arena::CreateMaybeMessage< ::PBWorker_HistogramMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_HistogramMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_Metrics*
Arena::CreateMaybeMessage< ::PBWorker_Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_Metrics >(arena);
}
template<> PROTOBUF_NOINLINE ::PBSchema_ComponentData*
Arena::CreateMaybeMessage< ::PBSchema_ComponentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBSchema_ComponentData >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_ComponentDataHandle*
Arena::CreateMaybeMessage< ::PBWorker_ComponentDataHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_ComponentDataHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_ComponentData*
Arena::CreateMaybeMessage< ::PBWorker_ComponentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_ComponentData >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_Entity*
Arena::CreateMaybeMessage< ::PBWorker_Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_ComponentUpdate*
Arena::CreateMaybeMessage< ::PBWorker_ComponentUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_ComponentUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_WorkerAttributes*
Arena::CreateMaybeMessage< ::PBWorker_WorkerAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_WorkerAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_CommandRequest*
Arena::CreateMaybeMessage< ::PBWorker_CommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_CommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PBWorker_CommandResponse*
Arena::CreateMaybeMessage< ::PBWorker_CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBWorker_CommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
