// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WorkerData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WorkerData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WorkerData_2eproto;
class PBSchemaComponentData;
struct PBSchemaComponentDataDefaultTypeInternal;
extern PBSchemaComponentDataDefaultTypeInternal _PBSchemaComponentData_default_instance_;
class PBWorkerCommandRequest;
struct PBWorkerCommandRequestDefaultTypeInternal;
extern PBWorkerCommandRequestDefaultTypeInternal _PBWorkerCommandRequest_default_instance_;
class PBWorkerCommandResponse;
struct PBWorkerCommandResponseDefaultTypeInternal;
extern PBWorkerCommandResponseDefaultTypeInternal _PBWorkerCommandResponse_default_instance_;
class PBWorkerComponentData;
struct PBWorkerComponentDataDefaultTypeInternal;
extern PBWorkerComponentDataDefaultTypeInternal _PBWorkerComponentData_default_instance_;
class PBWorkerComponentDataHandle;
struct PBWorkerComponentDataHandleDefaultTypeInternal;
extern PBWorkerComponentDataHandleDefaultTypeInternal _PBWorkerComponentDataHandle_default_instance_;
class PBWorkerComponentUpdate;
struct PBWorkerComponentUpdateDefaultTypeInternal;
extern PBWorkerComponentUpdateDefaultTypeInternal _PBWorkerComponentUpdate_default_instance_;
class PBWorkerEntity;
struct PBWorkerEntityDefaultTypeInternal;
extern PBWorkerEntityDefaultTypeInternal _PBWorkerEntity_default_instance_;
class PBWorkerGaugeMetric;
struct PBWorkerGaugeMetricDefaultTypeInternal;
extern PBWorkerGaugeMetricDefaultTypeInternal _PBWorkerGaugeMetric_default_instance_;
class PBWorkerHistogramMetric;
struct PBWorkerHistogramMetricDefaultTypeInternal;
extern PBWorkerHistogramMetricDefaultTypeInternal _PBWorkerHistogramMetric_default_instance_;
class PBWorkerHistogramMetricBucket;
struct PBWorkerHistogramMetricBucketDefaultTypeInternal;
extern PBWorkerHistogramMetricBucketDefaultTypeInternal _PBWorkerHistogramMetricBucket_default_instance_;
class PBWorkerMetrics;
struct PBWorkerMetricsDefaultTypeInternal;
extern PBWorkerMetricsDefaultTypeInternal _PBWorkerMetrics_default_instance_;
class PBWorkerWorkerAttributes;
struct PBWorkerWorkerAttributesDefaultTypeInternal;
extern PBWorkerWorkerAttributesDefaultTypeInternal _PBWorkerWorkerAttributes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBSchemaComponentData* Arena::CreateMaybeMessage<::PBSchemaComponentData>(Arena*);
template<> ::PBWorkerCommandRequest* Arena::CreateMaybeMessage<::PBWorkerCommandRequest>(Arena*);
template<> ::PBWorkerCommandResponse* Arena::CreateMaybeMessage<::PBWorkerCommandResponse>(Arena*);
template<> ::PBWorkerComponentData* Arena::CreateMaybeMessage<::PBWorkerComponentData>(Arena*);
template<> ::PBWorkerComponentDataHandle* Arena::CreateMaybeMessage<::PBWorkerComponentDataHandle>(Arena*);
template<> ::PBWorkerComponentUpdate* Arena::CreateMaybeMessage<::PBWorkerComponentUpdate>(Arena*);
template<> ::PBWorkerEntity* Arena::CreateMaybeMessage<::PBWorkerEntity>(Arena*);
template<> ::PBWorkerGaugeMetric* Arena::CreateMaybeMessage<::PBWorkerGaugeMetric>(Arena*);
template<> ::PBWorkerHistogramMetric* Arena::CreateMaybeMessage<::PBWorkerHistogramMetric>(Arena*);
template<> ::PBWorkerHistogramMetricBucket* Arena::CreateMaybeMessage<::PBWorkerHistogramMetricBucket>(Arena*);
template<> ::PBWorkerMetrics* Arena::CreateMaybeMessage<::PBWorkerMetrics>(Arena*);
template<> ::PBWorkerWorkerAttributes* Arena::CreateMaybeMessage<::PBWorkerWorkerAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PBWorkerStatusCode : int {
  WORKER_STATUS_CODE_SUCCESS = 1,
  WORKER_STATUS_CODE_TIMEOUT = 2,
  WORKER_STATUS_CODE_NOT_FOUND = 3,
  WORKER_STATUS_CODE_AUTHORITY_LOST = 4,
  WORKER_STATUS_CODE_PERMISSION_DENIED = 5,
  WORKER_STATUS_CODE_APPLICATION_ERROR = 6,
  WORKER_STATUS_CODE_INTERNAL_ERROR = 7
};
bool PBWorkerStatusCode_IsValid(int value);
constexpr PBWorkerStatusCode PBWorkerStatusCode_MIN = WORKER_STATUS_CODE_SUCCESS;
constexpr PBWorkerStatusCode PBWorkerStatusCode_MAX = WORKER_STATUS_CODE_INTERNAL_ERROR;
constexpr int PBWorkerStatusCode_ARRAYSIZE = PBWorkerStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorkerStatusCode_descriptor();
template<typename T>
inline const std::string& PBWorkerStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBWorkerStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBWorkerStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBWorkerStatusCode_descriptor(), enum_t_value);
}
inline bool PBWorkerStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBWorkerStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBWorkerStatusCode>(
    PBWorkerStatusCode_descriptor(), name, value);
}
enum PBWorkerAuthority : int {
  WORKER_AUTHORITY_NOT_AUTHORITATIVE = 0,
  WORKER_AUTHORITY_AUTHORITATIVE = 1,
  WORKER_AUTHORITY_AUTHORITY_LOSS_IMMINENT = 2
};
bool PBWorkerAuthority_IsValid(int value);
constexpr PBWorkerAuthority PBWorkerAuthority_MIN = WORKER_AUTHORITY_NOT_AUTHORITATIVE;
constexpr PBWorkerAuthority PBWorkerAuthority_MAX = WORKER_AUTHORITY_AUTHORITY_LOSS_IMMINENT;
constexpr int PBWorkerAuthority_ARRAYSIZE = PBWorkerAuthority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorkerAuthority_descriptor();
template<typename T>
inline const std::string& PBWorkerAuthority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBWorkerAuthority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBWorkerAuthority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBWorkerAuthority_descriptor(), enum_t_value);
}
inline bool PBWorkerAuthority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBWorkerAuthority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBWorkerAuthority>(
    PBWorkerAuthority_descriptor(), name, value);
}
// ===================================================================

class PBWorkerGaugeMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerGaugeMetric) */ {
 public:
  inline PBWorkerGaugeMetric() : PBWorkerGaugeMetric(nullptr) {}
  ~PBWorkerGaugeMetric() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerGaugeMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerGaugeMetric(const PBWorkerGaugeMetric& from);
  PBWorkerGaugeMetric(PBWorkerGaugeMetric&& from) noexcept
    : PBWorkerGaugeMetric() {
    *this = ::std::move(from);
  }

  inline PBWorkerGaugeMetric& operator=(const PBWorkerGaugeMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerGaugeMetric& operator=(PBWorkerGaugeMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerGaugeMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerGaugeMetric* internal_default_instance() {
    return reinterpret_cast<const PBWorkerGaugeMetric*>(
               &_PBWorkerGaugeMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBWorkerGaugeMetric& a, PBWorkerGaugeMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerGaugeMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerGaugeMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerGaugeMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerGaugeMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerGaugeMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerGaugeMetric& from) {
    PBWorkerGaugeMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerGaugeMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerGaugeMetric";
  }
  protected:
  explicit PBWorkerGaugeMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerGaugeMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    double value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerHistogramMetricBucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerHistogramMetricBucket) */ {
 public:
  inline PBWorkerHistogramMetricBucket() : PBWorkerHistogramMetricBucket(nullptr) {}
  ~PBWorkerHistogramMetricBucket() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerHistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerHistogramMetricBucket(const PBWorkerHistogramMetricBucket& from);
  PBWorkerHistogramMetricBucket(PBWorkerHistogramMetricBucket&& from) noexcept
    : PBWorkerHistogramMetricBucket() {
    *this = ::std::move(from);
  }

  inline PBWorkerHistogramMetricBucket& operator=(const PBWorkerHistogramMetricBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerHistogramMetricBucket& operator=(PBWorkerHistogramMetricBucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerHistogramMetricBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerHistogramMetricBucket* internal_default_instance() {
    return reinterpret_cast<const PBWorkerHistogramMetricBucket*>(
               &_PBWorkerHistogramMetricBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBWorkerHistogramMetricBucket& a, PBWorkerHistogramMetricBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerHistogramMetricBucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerHistogramMetricBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerHistogramMetricBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerHistogramMetricBucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerHistogramMetricBucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerHistogramMetricBucket& from) {
    PBWorkerHistogramMetricBucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerHistogramMetricBucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerHistogramMetricBucket";
  }
  protected:
  explicit PBWorkerHistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperBoundFieldNumber = 1,
    kSamplesFieldNumber = 2,
  };
  // optional double upper_bound = 1;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // optional uint32 samples = 2;
  bool has_samples() const;
  private:
  bool _internal_has_samples() const;
  public:
  void clear_samples();
  uint32_t samples() const;
  void set_samples(uint32_t value);
  private:
  uint32_t _internal_samples() const;
  void _internal_set_samples(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerHistogramMetricBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double upper_bound_;
    uint32_t samples_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerHistogramMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerHistogramMetric) */ {
 public:
  inline PBWorkerHistogramMetric() : PBWorkerHistogramMetric(nullptr) {}
  ~PBWorkerHistogramMetric() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerHistogramMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerHistogramMetric(const PBWorkerHistogramMetric& from);
  PBWorkerHistogramMetric(PBWorkerHistogramMetric&& from) noexcept
    : PBWorkerHistogramMetric() {
    *this = ::std::move(from);
  }

  inline PBWorkerHistogramMetric& operator=(const PBWorkerHistogramMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerHistogramMetric& operator=(PBWorkerHistogramMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerHistogramMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerHistogramMetric* internal_default_instance() {
    return reinterpret_cast<const PBWorkerHistogramMetric*>(
               &_PBWorkerHistogramMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBWorkerHistogramMetric& a, PBWorkerHistogramMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerHistogramMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerHistogramMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerHistogramMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerHistogramMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerHistogramMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerHistogramMetric& from) {
    PBWorkerHistogramMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerHistogramMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerHistogramMetric";
  }
  protected:
  explicit PBWorkerHistogramMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 4,
    kKeyFieldNumber = 1,
    kSumFieldNumber = 2,
    kBucketCountFieldNumber = 3,
  };
  // repeated .PBWorkerHistogramMetricBucket buckets = 4;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::PBWorkerHistogramMetricBucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetricBucket >*
      mutable_buckets();
  private:
  const ::PBWorkerHistogramMetricBucket& _internal_buckets(int index) const;
  ::PBWorkerHistogramMetricBucket* _internal_add_buckets();
  public:
  const ::PBWorkerHistogramMetricBucket& buckets(int index) const;
  ::PBWorkerHistogramMetricBucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetricBucket >&
      buckets() const;

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional double sum = 2;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // optional uint32 bucket_count = 3;
  bool has_bucket_count() const;
  private:
  bool _internal_has_bucket_count() const;
  public:
  void clear_bucket_count();
  uint32_t bucket_count() const;
  void set_bucket_count(uint32_t value);
  private:
  uint32_t _internal_bucket_count() const;
  void _internal_set_bucket_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerHistogramMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetricBucket > buckets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    double sum_;
    uint32_t bucket_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerMetrics) */ {
 public:
  inline PBWorkerMetrics() : PBWorkerMetrics(nullptr) {}
  ~PBWorkerMetrics() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerMetrics(const PBWorkerMetrics& from);
  PBWorkerMetrics(PBWorkerMetrics&& from) noexcept
    : PBWorkerMetrics() {
    *this = ::std::move(from);
  }

  inline PBWorkerMetrics& operator=(const PBWorkerMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerMetrics& operator=(PBWorkerMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerMetrics* internal_default_instance() {
    return reinterpret_cast<const PBWorkerMetrics*>(
               &_PBWorkerMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBWorkerMetrics& a, PBWorkerMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerMetrics& from) {
    PBWorkerMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerMetrics";
  }
  protected:
  explicit PBWorkerMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGaugeMetricsFieldNumber = 3,
    kHistogramMetricsFieldNumber = 5,
    kLoadFieldNumber = 1,
    kGaugeMetricCountFieldNumber = 2,
    kHistogramMetricCountFieldNumber = 4,
  };
  // repeated .PBWorkerGaugeMetric gauge_metrics = 3;
  int gauge_metrics_size() const;
  private:
  int _internal_gauge_metrics_size() const;
  public:
  void clear_gauge_metrics();
  ::PBWorkerGaugeMetric* mutable_gauge_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerGaugeMetric >*
      mutable_gauge_metrics();
  private:
  const ::PBWorkerGaugeMetric& _internal_gauge_metrics(int index) const;
  ::PBWorkerGaugeMetric* _internal_add_gauge_metrics();
  public:
  const ::PBWorkerGaugeMetric& gauge_metrics(int index) const;
  ::PBWorkerGaugeMetric* add_gauge_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerGaugeMetric >&
      gauge_metrics() const;

  // repeated .PBWorkerHistogramMetric histogram_metrics = 5;
  int histogram_metrics_size() const;
  private:
  int _internal_histogram_metrics_size() const;
  public:
  void clear_histogram_metrics();
  ::PBWorkerHistogramMetric* mutable_histogram_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetric >*
      mutable_histogram_metrics();
  private:
  const ::PBWorkerHistogramMetric& _internal_histogram_metrics(int index) const;
  ::PBWorkerHistogramMetric* _internal_add_histogram_metrics();
  public:
  const ::PBWorkerHistogramMetric& histogram_metrics(int index) const;
  ::PBWorkerHistogramMetric* add_histogram_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetric >&
      histogram_metrics() const;

  // optional double load = 1;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  double load() const;
  void set_load(double value);
  private:
  double _internal_load() const;
  void _internal_set_load(double value);
  public:

  // optional uint32 gauge_metric_count = 2;
  bool has_gauge_metric_count() const;
  private:
  bool _internal_has_gauge_metric_count() const;
  public:
  void clear_gauge_metric_count();
  uint32_t gauge_metric_count() const;
  void set_gauge_metric_count(uint32_t value);
  private:
  uint32_t _internal_gauge_metric_count() const;
  void _internal_set_gauge_metric_count(uint32_t value);
  public:

  // optional uint32 histogram_metric_count = 4;
  bool has_histogram_metric_count() const;
  private:
  bool _internal_has_histogram_metric_count() const;
  public:
  void clear_histogram_metric_count();
  uint32_t histogram_metric_count() const;
  void set_histogram_metric_count(uint32_t value);
  private:
  uint32_t _internal_histogram_metric_count() const;
  void _internal_set_histogram_metric_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerGaugeMetric > gauge_metrics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetric > histogram_metrics_;
    double load_;
    uint32_t gauge_metric_count_;
    uint32_t histogram_metric_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBSchemaComponentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBSchemaComponentData) */ {
 public:
  inline PBSchemaComponentData() : PBSchemaComponentData(nullptr) {}
  ~PBSchemaComponentData() override;
  explicit PROTOBUF_CONSTEXPR PBSchemaComponentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBSchemaComponentData(const PBSchemaComponentData& from);
  PBSchemaComponentData(PBSchemaComponentData&& from) noexcept
    : PBSchemaComponentData() {
    *this = ::std::move(from);
  }

  inline PBSchemaComponentData& operator=(const PBSchemaComponentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSchemaComponentData& operator=(PBSchemaComponentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBSchemaComponentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBSchemaComponentData* internal_default_instance() {
    return reinterpret_cast<const PBSchemaComponentData*>(
               &_PBSchemaComponentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBSchemaComponentData& a, PBSchemaComponentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSchemaComponentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSchemaComponentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBSchemaComponentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBSchemaComponentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBSchemaComponentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBSchemaComponentData& from) {
    PBSchemaComponentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSchemaComponentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBSchemaComponentData";
  }
  protected:
  explicit PBSchemaComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSchemaIdFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 schema_id = 1;
  bool has_schema_id() const;
  private:
  bool _internal_has_schema_id() const;
  public:
  void clear_schema_id();
  uint32_t schema_id() const;
  void set_schema_id(uint32_t value);
  private:
  uint32_t _internal_schema_id() const;
  void _internal_set_schema_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBSchemaComponentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t schema_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerComponentDataHandle final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PBWorkerComponentDataHandle) */ {
 public:
  inline PBWorkerComponentDataHandle() : PBWorkerComponentDataHandle(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PBWorkerComponentDataHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerComponentDataHandle(const PBWorkerComponentDataHandle& from);
  PBWorkerComponentDataHandle(PBWorkerComponentDataHandle&& from) noexcept
    : PBWorkerComponentDataHandle() {
    *this = ::std::move(from);
  }

  inline PBWorkerComponentDataHandle& operator=(const PBWorkerComponentDataHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerComponentDataHandle& operator=(PBWorkerComponentDataHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerComponentDataHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerComponentDataHandle* internal_default_instance() {
    return reinterpret_cast<const PBWorkerComponentDataHandle*>(
               &_PBWorkerComponentDataHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PBWorkerComponentDataHandle& a, PBWorkerComponentDataHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerComponentDataHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerComponentDataHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerComponentDataHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerComponentDataHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PBWorkerComponentDataHandle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PBWorkerComponentDataHandle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerComponentDataHandle";
  }
  protected:
  explicit PBWorkerComponentDataHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PBWorkerComponentDataHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerComponentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerComponentData) */ {
 public:
  inline PBWorkerComponentData() : PBWorkerComponentData(nullptr) {}
  ~PBWorkerComponentData() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerComponentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerComponentData(const PBWorkerComponentData& from);
  PBWorkerComponentData(PBWorkerComponentData&& from) noexcept
    : PBWorkerComponentData() {
    *this = ::std::move(from);
  }

  inline PBWorkerComponentData& operator=(const PBWorkerComponentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerComponentData& operator=(PBWorkerComponentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerComponentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerComponentData* internal_default_instance() {
    return reinterpret_cast<const PBWorkerComponentData*>(
               &_PBWorkerComponentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PBWorkerComponentData& a, PBWorkerComponentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerComponentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerComponentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerComponentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerComponentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerComponentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerComponentData& from) {
    PBWorkerComponentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerComponentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerComponentData";
  }
  protected:
  explicit PBWorkerComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchemaComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchemaComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchemaComponentData* release_schema_type();
  ::PBSchemaComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchemaComponentData* schema_type);
  private:
  const ::PBSchemaComponentData& _internal_schema_type() const;
  ::PBSchemaComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchemaComponentData* schema_type);
  ::PBSchemaComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorkerComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorkerComponentDataHandle* release_user_handle();
  ::PBWorkerComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle);
  private:
  const ::PBWorkerComponentDataHandle& _internal_user_handle() const;
  ::PBWorkerComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorkerComponentDataHandle* user_handle);
  ::PBWorkerComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerComponentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchemaComponentData* schema_type_;
    ::PBWorkerComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerEntity) */ {
 public:
  inline PBWorkerEntity() : PBWorkerEntity(nullptr) {}
  ~PBWorkerEntity() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerEntity(const PBWorkerEntity& from);
  PBWorkerEntity(PBWorkerEntity&& from) noexcept
    : PBWorkerEntity() {
    *this = ::std::move(from);
  }

  inline PBWorkerEntity& operator=(const PBWorkerEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerEntity& operator=(PBWorkerEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerEntity* internal_default_instance() {
    return reinterpret_cast<const PBWorkerEntity*>(
               &_PBWorkerEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PBWorkerEntity& a, PBWorkerEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerEntity& from) {
    PBWorkerEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerEntity";
  }
  protected:
  explicit PBWorkerEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 3,
    kEntityIdFieldNumber = 1,
    kComponentCountFieldNumber = 2,
  };
  // repeated .PBWorkerComponentData components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::PBWorkerComponentData* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerComponentData >*
      mutable_components();
  private:
  const ::PBWorkerComponentData& _internal_components(int index) const;
  ::PBWorkerComponentData* _internal_add_components();
  public:
  const ::PBWorkerComponentData& components(int index) const;
  ::PBWorkerComponentData* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerComponentData >&
      components() const;

  // optional int64 entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  int64_t entity_id() const;
  void set_entity_id(int64_t value);
  private:
  int64_t _internal_entity_id() const;
  void _internal_set_entity_id(int64_t value);
  public:

  // optional uint32 component_count = 2;
  bool has_component_count() const;
  private:
  bool _internal_has_component_count() const;
  public:
  void clear_component_count();
  uint32_t component_count() const;
  void set_component_count(uint32_t value);
  private:
  uint32_t _internal_component_count() const;
  void _internal_set_component_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerComponentData > components_;
    int64_t entity_id_;
    uint32_t component_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerComponentUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerComponentUpdate) */ {
 public:
  inline PBWorkerComponentUpdate() : PBWorkerComponentUpdate(nullptr) {}
  ~PBWorkerComponentUpdate() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerComponentUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerComponentUpdate(const PBWorkerComponentUpdate& from);
  PBWorkerComponentUpdate(PBWorkerComponentUpdate&& from) noexcept
    : PBWorkerComponentUpdate() {
    *this = ::std::move(from);
  }

  inline PBWorkerComponentUpdate& operator=(const PBWorkerComponentUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerComponentUpdate& operator=(PBWorkerComponentUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerComponentUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerComponentUpdate* internal_default_instance() {
    return reinterpret_cast<const PBWorkerComponentUpdate*>(
               &_PBWorkerComponentUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PBWorkerComponentUpdate& a, PBWorkerComponentUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerComponentUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerComponentUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerComponentUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerComponentUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerComponentUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerComponentUpdate& from) {
    PBWorkerComponentUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerComponentUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerComponentUpdate";
  }
  protected:
  explicit PBWorkerComponentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchemaComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchemaComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchemaComponentData* release_schema_type();
  ::PBSchemaComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchemaComponentData* schema_type);
  private:
  const ::PBSchemaComponentData& _internal_schema_type() const;
  ::PBSchemaComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchemaComponentData* schema_type);
  ::PBSchemaComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorkerComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorkerComponentDataHandle* release_user_handle();
  ::PBWorkerComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle);
  private:
  const ::PBWorkerComponentDataHandle& _internal_user_handle() const;
  ::PBWorkerComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorkerComponentDataHandle* user_handle);
  ::PBWorkerComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerComponentUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchemaComponentData* schema_type_;
    ::PBWorkerComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerWorkerAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerWorkerAttributes) */ {
 public:
  inline PBWorkerWorkerAttributes() : PBWorkerWorkerAttributes(nullptr) {}
  ~PBWorkerWorkerAttributes() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerWorkerAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerWorkerAttributes(const PBWorkerWorkerAttributes& from);
  PBWorkerWorkerAttributes(PBWorkerWorkerAttributes&& from) noexcept
    : PBWorkerWorkerAttributes() {
    *this = ::std::move(from);
  }

  inline PBWorkerWorkerAttributes& operator=(const PBWorkerWorkerAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerWorkerAttributes& operator=(PBWorkerWorkerAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerWorkerAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerWorkerAttributes* internal_default_instance() {
    return reinterpret_cast<const PBWorkerWorkerAttributes*>(
               &_PBWorkerWorkerAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PBWorkerWorkerAttributes& a, PBWorkerWorkerAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerWorkerAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerWorkerAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerWorkerAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerWorkerAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerWorkerAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerWorkerAttributes& from) {
    PBWorkerWorkerAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerWorkerAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerWorkerAttributes";
  }
  protected:
  explicit PBWorkerWorkerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kAttributeCountFieldNumber = 1,
  };
  // repeated bytes attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const void* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // optional uint32 attribute_count = 1;
  bool has_attribute_count() const;
  private:
  bool _internal_has_attribute_count() const;
  public:
  void clear_attribute_count();
  uint32_t attribute_count() const;
  void set_attribute_count(uint32_t value);
  private:
  uint32_t _internal_attribute_count() const;
  void _internal_set_attribute_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerWorkerAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
    uint32_t attribute_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerCommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerCommandRequest) */ {
 public:
  inline PBWorkerCommandRequest() : PBWorkerCommandRequest(nullptr) {}
  ~PBWorkerCommandRequest() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerCommandRequest(const PBWorkerCommandRequest& from);
  PBWorkerCommandRequest(PBWorkerCommandRequest&& from) noexcept
    : PBWorkerCommandRequest() {
    *this = ::std::move(from);
  }

  inline PBWorkerCommandRequest& operator=(const PBWorkerCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerCommandRequest& operator=(PBWorkerCommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerCommandRequest* internal_default_instance() {
    return reinterpret_cast<const PBWorkerCommandRequest*>(
               &_PBWorkerCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PBWorkerCommandRequest& a, PBWorkerCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerCommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerCommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerCommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerCommandRequest& from) {
    PBWorkerCommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerCommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerCommandRequest";
  }
  protected:
  explicit PBWorkerCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchemaComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchemaComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchemaComponentData* release_schema_type();
  ::PBSchemaComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchemaComponentData* schema_type);
  private:
  const ::PBSchemaComponentData& _internal_schema_type() const;
  ::PBSchemaComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchemaComponentData* schema_type);
  ::PBSchemaComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorkerComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorkerComponentDataHandle* release_user_handle();
  ::PBWorkerComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle);
  private:
  const ::PBWorkerComponentDataHandle& _internal_user_handle() const;
  ::PBWorkerComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorkerComponentDataHandle* user_handle);
  ::PBWorkerComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchemaComponentData* schema_type_;
    ::PBWorkerComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorkerCommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorkerCommandResponse) */ {
 public:
  inline PBWorkerCommandResponse() : PBWorkerCommandResponse(nullptr) {}
  ~PBWorkerCommandResponse() override;
  explicit PROTOBUF_CONSTEXPR PBWorkerCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorkerCommandResponse(const PBWorkerCommandResponse& from);
  PBWorkerCommandResponse(PBWorkerCommandResponse&& from) noexcept
    : PBWorkerCommandResponse() {
    *this = ::std::move(from);
  }

  inline PBWorkerCommandResponse& operator=(const PBWorkerCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorkerCommandResponse& operator=(PBWorkerCommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorkerCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorkerCommandResponse* internal_default_instance() {
    return reinterpret_cast<const PBWorkerCommandResponse*>(
               &_PBWorkerCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PBWorkerCommandResponse& a, PBWorkerCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorkerCommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorkerCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorkerCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorkerCommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorkerCommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorkerCommandResponse& from) {
    PBWorkerCommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorkerCommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorkerCommandResponse";
  }
  protected:
  explicit PBWorkerCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchemaComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchemaComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchemaComponentData* release_schema_type();
  ::PBSchemaComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchemaComponentData* schema_type);
  private:
  const ::PBSchemaComponentData& _internal_schema_type() const;
  ::PBSchemaComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchemaComponentData* schema_type);
  ::PBSchemaComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorkerComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorkerComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorkerComponentDataHandle* release_user_handle();
  ::PBWorkerComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle);
  private:
  const ::PBWorkerComponentDataHandle& _internal_user_handle() const;
  ::PBWorkerComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorkerComponentDataHandle* user_handle);
  ::PBWorkerComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorkerCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchemaComponentData* schema_type_;
    ::PBWorkerComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBWorkerGaugeMetric

// optional string key = 1;
inline bool PBWorkerGaugeMetric::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerGaugeMetric::has_key() const {
  return _internal_has_key();
}
inline void PBWorkerGaugeMetric::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerGaugeMetric::key() const {
  // @@protoc_insertion_point(field_get:PBWorkerGaugeMetric.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerGaugeMetric::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerGaugeMetric.key)
}
inline std::string* PBWorkerGaugeMetric::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PBWorkerGaugeMetric.key)
  return _s;
}
inline const std::string& PBWorkerGaugeMetric::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PBWorkerGaugeMetric::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerGaugeMetric::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerGaugeMetric::release_key() {
  // @@protoc_insertion_point(field_release:PBWorkerGaugeMetric.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerGaugeMetric::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerGaugeMetric.key)
}

// optional double value = 2;
inline bool PBWorkerGaugeMetric::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorkerGaugeMetric::has_value() const {
  return _internal_has_value();
}
inline void PBWorkerGaugeMetric::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PBWorkerGaugeMetric::_internal_value() const {
  return _impl_.value_;
}
inline double PBWorkerGaugeMetric::value() const {
  // @@protoc_insertion_point(field_get:PBWorkerGaugeMetric.value)
  return _internal_value();
}
inline void PBWorkerGaugeMetric::_internal_set_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void PBWorkerGaugeMetric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PBWorkerGaugeMetric.value)
}

// -------------------------------------------------------------------

// PBWorkerHistogramMetricBucket

// optional double upper_bound = 1;
inline bool PBWorkerHistogramMetricBucket::_internal_has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerHistogramMetricBucket::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void PBWorkerHistogramMetricBucket::clear_upper_bound() {
  _impl_.upper_bound_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PBWorkerHistogramMetricBucket::_internal_upper_bound() const {
  return _impl_.upper_bound_;
}
inline double PBWorkerHistogramMetricBucket::upper_bound() const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetricBucket.upper_bound)
  return _internal_upper_bound();
}
inline void PBWorkerHistogramMetricBucket::_internal_set_upper_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.upper_bound_ = value;
}
inline void PBWorkerHistogramMetricBucket::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:PBWorkerHistogramMetricBucket.upper_bound)
}

// optional uint32 samples = 2;
inline bool PBWorkerHistogramMetricBucket::_internal_has_samples() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorkerHistogramMetricBucket::has_samples() const {
  return _internal_has_samples();
}
inline void PBWorkerHistogramMetricBucket::clear_samples() {
  _impl_.samples_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorkerHistogramMetricBucket::_internal_samples() const {
  return _impl_.samples_;
}
inline uint32_t PBWorkerHistogramMetricBucket::samples() const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetricBucket.samples)
  return _internal_samples();
}
inline void PBWorkerHistogramMetricBucket::_internal_set_samples(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.samples_ = value;
}
inline void PBWorkerHistogramMetricBucket::set_samples(uint32_t value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:PBWorkerHistogramMetricBucket.samples)
}

// -------------------------------------------------------------------

// PBWorkerHistogramMetric

// optional string key = 1;
inline bool PBWorkerHistogramMetric::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerHistogramMetric::has_key() const {
  return _internal_has_key();
}
inline void PBWorkerHistogramMetric::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerHistogramMetric::key() const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetric.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerHistogramMetric::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerHistogramMetric.key)
}
inline std::string* PBWorkerHistogramMetric::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PBWorkerHistogramMetric.key)
  return _s;
}
inline const std::string& PBWorkerHistogramMetric::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PBWorkerHistogramMetric::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerHistogramMetric::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerHistogramMetric::release_key() {
  // @@protoc_insertion_point(field_release:PBWorkerHistogramMetric.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerHistogramMetric::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerHistogramMetric.key)
}

// optional double sum = 2;
inline bool PBWorkerHistogramMetric::_internal_has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorkerHistogramMetric::has_sum() const {
  return _internal_has_sum();
}
inline void PBWorkerHistogramMetric::clear_sum() {
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PBWorkerHistogramMetric::_internal_sum() const {
  return _impl_.sum_;
}
inline double PBWorkerHistogramMetric::sum() const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetric.sum)
  return _internal_sum();
}
inline void PBWorkerHistogramMetric::_internal_set_sum(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sum_ = value;
}
inline void PBWorkerHistogramMetric::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:PBWorkerHistogramMetric.sum)
}

// optional uint32 bucket_count = 3;
inline bool PBWorkerHistogramMetric::_internal_has_bucket_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBWorkerHistogramMetric::has_bucket_count() const {
  return _internal_has_bucket_count();
}
inline void PBWorkerHistogramMetric::clear_bucket_count() {
  _impl_.bucket_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PBWorkerHistogramMetric::_internal_bucket_count() const {
  return _impl_.bucket_count_;
}
inline uint32_t PBWorkerHistogramMetric::bucket_count() const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetric.bucket_count)
  return _internal_bucket_count();
}
inline void PBWorkerHistogramMetric::_internal_set_bucket_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bucket_count_ = value;
}
inline void PBWorkerHistogramMetric::set_bucket_count(uint32_t value) {
  _internal_set_bucket_count(value);
  // @@protoc_insertion_point(field_set:PBWorkerHistogramMetric.bucket_count)
}

// repeated .PBWorkerHistogramMetricBucket buckets = 4;
inline int PBWorkerHistogramMetric::_internal_buckets_size() const {
  return _impl_.buckets_.size();
}
inline int PBWorkerHistogramMetric::buckets_size() const {
  return _internal_buckets_size();
}
inline void PBWorkerHistogramMetric::clear_buckets() {
  _impl_.buckets_.Clear();
}
inline ::PBWorkerHistogramMetricBucket* PBWorkerHistogramMetric::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorkerHistogramMetric.buckets)
  return _impl_.buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetricBucket >*
PBWorkerHistogramMetric::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:PBWorkerHistogramMetric.buckets)
  return &_impl_.buckets_;
}
inline const ::PBWorkerHistogramMetricBucket& PBWorkerHistogramMetric::_internal_buckets(int index) const {
  return _impl_.buckets_.Get(index);
}
inline const ::PBWorkerHistogramMetricBucket& PBWorkerHistogramMetric::buckets(int index) const {
  // @@protoc_insertion_point(field_get:PBWorkerHistogramMetric.buckets)
  return _internal_buckets(index);
}
inline ::PBWorkerHistogramMetricBucket* PBWorkerHistogramMetric::_internal_add_buckets() {
  return _impl_.buckets_.Add();
}
inline ::PBWorkerHistogramMetricBucket* PBWorkerHistogramMetric::add_buckets() {
  ::PBWorkerHistogramMetricBucket* _add = _internal_add_buckets();
  // @@protoc_insertion_point(field_add:PBWorkerHistogramMetric.buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetricBucket >&
PBWorkerHistogramMetric::buckets() const {
  // @@protoc_insertion_point(field_list:PBWorkerHistogramMetric.buckets)
  return _impl_.buckets_;
}

// -------------------------------------------------------------------

// PBWorkerMetrics

// optional double load = 1;
inline bool PBWorkerMetrics::_internal_has_load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerMetrics::has_load() const {
  return _internal_has_load();
}
inline void PBWorkerMetrics::clear_load() {
  _impl_.load_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PBWorkerMetrics::_internal_load() const {
  return _impl_.load_;
}
inline double PBWorkerMetrics::load() const {
  // @@protoc_insertion_point(field_get:PBWorkerMetrics.load)
  return _internal_load();
}
inline void PBWorkerMetrics::_internal_set_load(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.load_ = value;
}
inline void PBWorkerMetrics::set_load(double value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:PBWorkerMetrics.load)
}

// optional uint32 gauge_metric_count = 2;
inline bool PBWorkerMetrics::_internal_has_gauge_metric_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorkerMetrics::has_gauge_metric_count() const {
  return _internal_has_gauge_metric_count();
}
inline void PBWorkerMetrics::clear_gauge_metric_count() {
  _impl_.gauge_metric_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorkerMetrics::_internal_gauge_metric_count() const {
  return _impl_.gauge_metric_count_;
}
inline uint32_t PBWorkerMetrics::gauge_metric_count() const {
  // @@protoc_insertion_point(field_get:PBWorkerMetrics.gauge_metric_count)
  return _internal_gauge_metric_count();
}
inline void PBWorkerMetrics::_internal_set_gauge_metric_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gauge_metric_count_ = value;
}
inline void PBWorkerMetrics::set_gauge_metric_count(uint32_t value) {
  _internal_set_gauge_metric_count(value);
  // @@protoc_insertion_point(field_set:PBWorkerMetrics.gauge_metric_count)
}

// repeated .PBWorkerGaugeMetric gauge_metrics = 3;
inline int PBWorkerMetrics::_internal_gauge_metrics_size() const {
  return _impl_.gauge_metrics_.size();
}
inline int PBWorkerMetrics::gauge_metrics_size() const {
  return _internal_gauge_metrics_size();
}
inline void PBWorkerMetrics::clear_gauge_metrics() {
  _impl_.gauge_metrics_.Clear();
}
inline ::PBWorkerGaugeMetric* PBWorkerMetrics::mutable_gauge_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorkerMetrics.gauge_metrics)
  return _impl_.gauge_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerGaugeMetric >*
PBWorkerMetrics::mutable_gauge_metrics() {
  // @@protoc_insertion_point(field_mutable_list:PBWorkerMetrics.gauge_metrics)
  return &_impl_.gauge_metrics_;
}
inline const ::PBWorkerGaugeMetric& PBWorkerMetrics::_internal_gauge_metrics(int index) const {
  return _impl_.gauge_metrics_.Get(index);
}
inline const ::PBWorkerGaugeMetric& PBWorkerMetrics::gauge_metrics(int index) const {
  // @@protoc_insertion_point(field_get:PBWorkerMetrics.gauge_metrics)
  return _internal_gauge_metrics(index);
}
inline ::PBWorkerGaugeMetric* PBWorkerMetrics::_internal_add_gauge_metrics() {
  return _impl_.gauge_metrics_.Add();
}
inline ::PBWorkerGaugeMetric* PBWorkerMetrics::add_gauge_metrics() {
  ::PBWorkerGaugeMetric* _add = _internal_add_gauge_metrics();
  // @@protoc_insertion_point(field_add:PBWorkerMetrics.gauge_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerGaugeMetric >&
PBWorkerMetrics::gauge_metrics() const {
  // @@protoc_insertion_point(field_list:PBWorkerMetrics.gauge_metrics)
  return _impl_.gauge_metrics_;
}

// optional uint32 histogram_metric_count = 4;
inline bool PBWorkerMetrics::_internal_has_histogram_metric_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBWorkerMetrics::has_histogram_metric_count() const {
  return _internal_has_histogram_metric_count();
}
inline void PBWorkerMetrics::clear_histogram_metric_count() {
  _impl_.histogram_metric_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PBWorkerMetrics::_internal_histogram_metric_count() const {
  return _impl_.histogram_metric_count_;
}
inline uint32_t PBWorkerMetrics::histogram_metric_count() const {
  // @@protoc_insertion_point(field_get:PBWorkerMetrics.histogram_metric_count)
  return _internal_histogram_metric_count();
}
inline void PBWorkerMetrics::_internal_set_histogram_metric_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.histogram_metric_count_ = value;
}
inline void PBWorkerMetrics::set_histogram_metric_count(uint32_t value) {
  _internal_set_histogram_metric_count(value);
  // @@protoc_insertion_point(field_set:PBWorkerMetrics.histogram_metric_count)
}

// repeated .PBWorkerHistogramMetric histogram_metrics = 5;
inline int PBWorkerMetrics::_internal_histogram_metrics_size() const {
  return _impl_.histogram_metrics_.size();
}
inline int PBWorkerMetrics::histogram_metrics_size() const {
  return _internal_histogram_metrics_size();
}
inline void PBWorkerMetrics::clear_histogram_metrics() {
  _impl_.histogram_metrics_.Clear();
}
inline ::PBWorkerHistogramMetric* PBWorkerMetrics::mutable_histogram_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorkerMetrics.histogram_metrics)
  return _impl_.histogram_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetric >*
PBWorkerMetrics::mutable_histogram_metrics() {
  // @@protoc_insertion_point(field_mutable_list:PBWorkerMetrics.histogram_metrics)
  return &_impl_.histogram_metrics_;
}
inline const ::PBWorkerHistogramMetric& PBWorkerMetrics::_internal_histogram_metrics(int index) const {
  return _impl_.histogram_metrics_.Get(index);
}
inline const ::PBWorkerHistogramMetric& PBWorkerMetrics::histogram_metrics(int index) const {
  // @@protoc_insertion_point(field_get:PBWorkerMetrics.histogram_metrics)
  return _internal_histogram_metrics(index);
}
inline ::PBWorkerHistogramMetric* PBWorkerMetrics::_internal_add_histogram_metrics() {
  return _impl_.histogram_metrics_.Add();
}
inline ::PBWorkerHistogramMetric* PBWorkerMetrics::add_histogram_metrics() {
  ::PBWorkerHistogramMetric* _add = _internal_add_histogram_metrics();
  // @@protoc_insertion_point(field_add:PBWorkerMetrics.histogram_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerHistogramMetric >&
PBWorkerMetrics::histogram_metrics() const {
  // @@protoc_insertion_point(field_list:PBWorkerMetrics.histogram_metrics)
  return _impl_.histogram_metrics_;
}

// -------------------------------------------------------------------

// PBSchemaComponentData

// optional uint32 schema_id = 1;
inline bool PBSchemaComponentData::_internal_has_schema_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBSchemaComponentData::has_schema_id() const {
  return _internal_has_schema_id();
}
inline void PBSchemaComponentData::clear_schema_id() {
  _impl_.schema_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBSchemaComponentData::_internal_schema_id() const {
  return _impl_.schema_id_;
}
inline uint32_t PBSchemaComponentData::schema_id() const {
  // @@protoc_insertion_point(field_get:PBSchemaComponentData.schema_id)
  return _internal_schema_id();
}
inline void PBSchemaComponentData::_internal_set_schema_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.schema_id_ = value;
}
inline void PBSchemaComponentData::set_schema_id(uint32_t value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:PBSchemaComponentData.schema_id)
}

// optional bytes data = 2;
inline bool PBSchemaComponentData::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBSchemaComponentData::has_data() const {
  return _internal_has_data();
}
inline void PBSchemaComponentData::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBSchemaComponentData::data() const {
  // @@protoc_insertion_point(field_get:PBSchemaComponentData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBSchemaComponentData::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBSchemaComponentData.data)
}
inline std::string* PBSchemaComponentData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PBSchemaComponentData.data)
  return _s;
}
inline const std::string& PBSchemaComponentData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PBSchemaComponentData::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PBSchemaComponentData::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PBSchemaComponentData::release_data() {
  // @@protoc_insertion_point(field_release:PBSchemaComponentData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBSchemaComponentData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBSchemaComponentData.data)
}

// -------------------------------------------------------------------

// PBWorkerComponentDataHandle

// -------------------------------------------------------------------

// PBWorkerComponentData

// optional bytes reserved = 1;
inline bool PBWorkerComponentData::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerComponentData::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorkerComponentData::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerComponentData::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentData.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerComponentData::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerComponentData.reserved)
}
inline std::string* PBWorkerComponentData::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentData.reserved)
  return _s;
}
inline const std::string& PBWorkerComponentData::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorkerComponentData::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerComponentData::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerComponentData::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentData.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerComponentData::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentData.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorkerComponentData::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorkerComponentData::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorkerComponentData::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorkerComponentData::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorkerComponentData::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentData.component_id)
  return _internal_component_id();
}
inline void PBWorkerComponentData::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorkerComponentData::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorkerComponentData.component_id)
}

// optional .PBSchemaComponentData schema_type = 3;
inline bool PBWorkerComponentData::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorkerComponentData::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorkerComponentData::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchemaComponentData& PBWorkerComponentData::_internal_schema_type() const {
  const ::PBSchemaComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchemaComponentData&>(
      ::_PBSchemaComponentData_default_instance_);
}
inline const ::PBSchemaComponentData& PBWorkerComponentData::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentData.schema_type)
  return _internal_schema_type();
}
inline void PBWorkerComponentData::unsafe_arena_set_allocated_schema_type(
    ::PBSchemaComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerComponentData.schema_type)
}
inline ::PBSchemaComponentData* PBWorkerComponentData::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerComponentData::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentData.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerComponentData::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchemaComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchemaComponentData* PBWorkerComponentData::mutable_schema_type() {
  ::PBSchemaComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentData.schema_type)
  return _msg;
}
inline void PBWorkerComponentData::set_allocated_schema_type(::PBSchemaComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentData.schema_type)
}

// optional .PBWorkerComponentDataHandle user_handle = 4;
inline bool PBWorkerComponentData::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorkerComponentData::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorkerComponentData::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorkerComponentDataHandle& PBWorkerComponentData::_internal_user_handle() const {
  const ::PBWorkerComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorkerComponentDataHandle&>(
      ::_PBWorkerComponentDataHandle_default_instance_);
}
inline const ::PBWorkerComponentDataHandle& PBWorkerComponentData::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentData.user_handle)
  return _internal_user_handle();
}
inline void PBWorkerComponentData::unsafe_arena_set_allocated_user_handle(
    ::PBWorkerComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerComponentData.user_handle)
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentData::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentData::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentData.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentData::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorkerComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentData::mutable_user_handle() {
  ::PBWorkerComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentData.user_handle)
  return _msg;
}
inline void PBWorkerComponentData::set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentData.user_handle)
}

// -------------------------------------------------------------------

// PBWorkerEntity

// optional int64 entity_id = 1;
inline bool PBWorkerEntity::_internal_has_entity_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerEntity::has_entity_id() const {
  return _internal_has_entity_id();
}
inline void PBWorkerEntity::clear_entity_id() {
  _impl_.entity_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t PBWorkerEntity::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline int64_t PBWorkerEntity::entity_id() const {
  // @@protoc_insertion_point(field_get:PBWorkerEntity.entity_id)
  return _internal_entity_id();
}
inline void PBWorkerEntity::_internal_set_entity_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.entity_id_ = value;
}
inline void PBWorkerEntity::set_entity_id(int64_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:PBWorkerEntity.entity_id)
}

// optional uint32 component_count = 2;
inline bool PBWorkerEntity::_internal_has_component_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorkerEntity::has_component_count() const {
  return _internal_has_component_count();
}
inline void PBWorkerEntity::clear_component_count() {
  _impl_.component_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorkerEntity::_internal_component_count() const {
  return _impl_.component_count_;
}
inline uint32_t PBWorkerEntity::component_count() const {
  // @@protoc_insertion_point(field_get:PBWorkerEntity.component_count)
  return _internal_component_count();
}
inline void PBWorkerEntity::_internal_set_component_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.component_count_ = value;
}
inline void PBWorkerEntity::set_component_count(uint32_t value) {
  _internal_set_component_count(value);
  // @@protoc_insertion_point(field_set:PBWorkerEntity.component_count)
}

// repeated .PBWorkerComponentData components = 3;
inline int PBWorkerEntity::_internal_components_size() const {
  return _impl_.components_.size();
}
inline int PBWorkerEntity::components_size() const {
  return _internal_components_size();
}
inline void PBWorkerEntity::clear_components() {
  _impl_.components_.Clear();
}
inline ::PBWorkerComponentData* PBWorkerEntity::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorkerEntity.components)
  return _impl_.components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerComponentData >*
PBWorkerEntity::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:PBWorkerEntity.components)
  return &_impl_.components_;
}
inline const ::PBWorkerComponentData& PBWorkerEntity::_internal_components(int index) const {
  return _impl_.components_.Get(index);
}
inline const ::PBWorkerComponentData& PBWorkerEntity::components(int index) const {
  // @@protoc_insertion_point(field_get:PBWorkerEntity.components)
  return _internal_components(index);
}
inline ::PBWorkerComponentData* PBWorkerEntity::_internal_add_components() {
  return _impl_.components_.Add();
}
inline ::PBWorkerComponentData* PBWorkerEntity::add_components() {
  ::PBWorkerComponentData* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:PBWorkerEntity.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorkerComponentData >&
PBWorkerEntity::components() const {
  // @@protoc_insertion_point(field_list:PBWorkerEntity.components)
  return _impl_.components_;
}

// -------------------------------------------------------------------

// PBWorkerComponentUpdate

// optional bytes reserved = 1;
inline bool PBWorkerComponentUpdate::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerComponentUpdate::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorkerComponentUpdate::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerComponentUpdate::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentUpdate.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerComponentUpdate::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerComponentUpdate.reserved)
}
inline std::string* PBWorkerComponentUpdate::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentUpdate.reserved)
  return _s;
}
inline const std::string& PBWorkerComponentUpdate::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorkerComponentUpdate::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerComponentUpdate::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerComponentUpdate::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentUpdate.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerComponentUpdate::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentUpdate.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorkerComponentUpdate::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorkerComponentUpdate::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorkerComponentUpdate::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorkerComponentUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorkerComponentUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentUpdate.component_id)
  return _internal_component_id();
}
inline void PBWorkerComponentUpdate::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorkerComponentUpdate::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorkerComponentUpdate.component_id)
}

// optional .PBSchemaComponentData schema_type = 3;
inline bool PBWorkerComponentUpdate::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorkerComponentUpdate::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorkerComponentUpdate::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchemaComponentData& PBWorkerComponentUpdate::_internal_schema_type() const {
  const ::PBSchemaComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchemaComponentData&>(
      ::_PBSchemaComponentData_default_instance_);
}
inline const ::PBSchemaComponentData& PBWorkerComponentUpdate::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentUpdate.schema_type)
  return _internal_schema_type();
}
inline void PBWorkerComponentUpdate::unsafe_arena_set_allocated_schema_type(
    ::PBSchemaComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerComponentUpdate.schema_type)
}
inline ::PBSchemaComponentData* PBWorkerComponentUpdate::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerComponentUpdate::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentUpdate.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerComponentUpdate::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchemaComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchemaComponentData* PBWorkerComponentUpdate::mutable_schema_type() {
  ::PBSchemaComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentUpdate.schema_type)
  return _msg;
}
inline void PBWorkerComponentUpdate::set_allocated_schema_type(::PBSchemaComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentUpdate.schema_type)
}

// optional .PBWorkerComponentDataHandle user_handle = 4;
inline bool PBWorkerComponentUpdate::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorkerComponentUpdate::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorkerComponentUpdate::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorkerComponentDataHandle& PBWorkerComponentUpdate::_internal_user_handle() const {
  const ::PBWorkerComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorkerComponentDataHandle&>(
      ::_PBWorkerComponentDataHandle_default_instance_);
}
inline const ::PBWorkerComponentDataHandle& PBWorkerComponentUpdate::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorkerComponentUpdate.user_handle)
  return _internal_user_handle();
}
inline void PBWorkerComponentUpdate::unsafe_arena_set_allocated_user_handle(
    ::PBWorkerComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerComponentUpdate.user_handle)
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentUpdate::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentUpdate::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorkerComponentUpdate.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentUpdate::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorkerComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorkerComponentDataHandle* PBWorkerComponentUpdate::mutable_user_handle() {
  ::PBWorkerComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorkerComponentUpdate.user_handle)
  return _msg;
}
inline void PBWorkerComponentUpdate::set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerComponentUpdate.user_handle)
}

// -------------------------------------------------------------------

// PBWorkerWorkerAttributes

// optional uint32 attribute_count = 1;
inline bool PBWorkerWorkerAttributes::_internal_has_attribute_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerWorkerAttributes::has_attribute_count() const {
  return _internal_has_attribute_count();
}
inline void PBWorkerWorkerAttributes::clear_attribute_count() {
  _impl_.attribute_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PBWorkerWorkerAttributes::_internal_attribute_count() const {
  return _impl_.attribute_count_;
}
inline uint32_t PBWorkerWorkerAttributes::attribute_count() const {
  // @@protoc_insertion_point(field_get:PBWorkerWorkerAttributes.attribute_count)
  return _internal_attribute_count();
}
inline void PBWorkerWorkerAttributes::_internal_set_attribute_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attribute_count_ = value;
}
inline void PBWorkerWorkerAttributes::set_attribute_count(uint32_t value) {
  _internal_set_attribute_count(value);
  // @@protoc_insertion_point(field_set:PBWorkerWorkerAttributes.attribute_count)
}

// repeated bytes attributes = 2;
inline int PBWorkerWorkerAttributes::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int PBWorkerWorkerAttributes::attributes_size() const {
  return _internal_attributes_size();
}
inline void PBWorkerWorkerAttributes::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline std::string* PBWorkerWorkerAttributes::add_attributes() {
  std::string* _s = _internal_add_attributes();
  // @@protoc_insertion_point(field_add_mutable:PBWorkerWorkerAttributes.attributes)
  return _s;
}
inline const std::string& PBWorkerWorkerAttributes::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const std::string& PBWorkerWorkerAttributes::attributes(int index) const {
  // @@protoc_insertion_point(field_get:PBWorkerWorkerAttributes.attributes)
  return _internal_attributes(index);
}
inline std::string* PBWorkerWorkerAttributes::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorkerWorkerAttributes.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline void PBWorkerWorkerAttributes::set_attributes(int index, const std::string& value) {
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::set_attributes(int index, std::string&& value) {
  _impl_.attributes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::set_attributes(int index, const void* value, size_t size) {
  _impl_.attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBWorkerWorkerAttributes.attributes)
}
inline std::string* PBWorkerWorkerAttributes::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline void PBWorkerWorkerAttributes::add_attributes(const std::string& value) {
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::add_attributes(std::string&& value) {
  _impl_.attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PBWorkerWorkerAttributes.attributes)
}
inline void PBWorkerWorkerAttributes::add_attributes(const void* value, size_t size) {
  _impl_.attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PBWorkerWorkerAttributes.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBWorkerWorkerAttributes::attributes() const {
  // @@protoc_insertion_point(field_list:PBWorkerWorkerAttributes.attributes)
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBWorkerWorkerAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PBWorkerWorkerAttributes.attributes)
  return &_impl_.attributes_;
}

// -------------------------------------------------------------------

// PBWorkerCommandRequest

// optional bytes reserved = 1;
inline bool PBWorkerCommandRequest::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerCommandRequest::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorkerCommandRequest::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerCommandRequest::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandRequest.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerCommandRequest::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerCommandRequest.reserved)
}
inline std::string* PBWorkerCommandRequest::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandRequest.reserved)
  return _s;
}
inline const std::string& PBWorkerCommandRequest::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorkerCommandRequest::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerCommandRequest::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerCommandRequest::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandRequest.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerCommandRequest::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandRequest.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorkerCommandRequest::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorkerCommandRequest::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorkerCommandRequest::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorkerCommandRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorkerCommandRequest::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandRequest.component_id)
  return _internal_component_id();
}
inline void PBWorkerCommandRequest::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorkerCommandRequest::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorkerCommandRequest.component_id)
}

// optional .PBSchemaComponentData schema_type = 3;
inline bool PBWorkerCommandRequest::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorkerCommandRequest::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorkerCommandRequest::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchemaComponentData& PBWorkerCommandRequest::_internal_schema_type() const {
  const ::PBSchemaComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchemaComponentData&>(
      ::_PBSchemaComponentData_default_instance_);
}
inline const ::PBSchemaComponentData& PBWorkerCommandRequest::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandRequest.schema_type)
  return _internal_schema_type();
}
inline void PBWorkerCommandRequest::unsafe_arena_set_allocated_schema_type(
    ::PBSchemaComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerCommandRequest.schema_type)
}
inline ::PBSchemaComponentData* PBWorkerCommandRequest::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerCommandRequest::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandRequest.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerCommandRequest::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchemaComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchemaComponentData* PBWorkerCommandRequest::mutable_schema_type() {
  ::PBSchemaComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandRequest.schema_type)
  return _msg;
}
inline void PBWorkerCommandRequest::set_allocated_schema_type(::PBSchemaComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandRequest.schema_type)
}

// optional .PBWorkerComponentDataHandle user_handle = 4;
inline bool PBWorkerCommandRequest::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorkerCommandRequest::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorkerCommandRequest::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorkerComponentDataHandle& PBWorkerCommandRequest::_internal_user_handle() const {
  const ::PBWorkerComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorkerComponentDataHandle&>(
      ::_PBWorkerComponentDataHandle_default_instance_);
}
inline const ::PBWorkerComponentDataHandle& PBWorkerCommandRequest::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandRequest.user_handle)
  return _internal_user_handle();
}
inline void PBWorkerCommandRequest::unsafe_arena_set_allocated_user_handle(
    ::PBWorkerComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerCommandRequest.user_handle)
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandRequest::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandRequest::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandRequest.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandRequest::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorkerComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandRequest::mutable_user_handle() {
  ::PBWorkerComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandRequest.user_handle)
  return _msg;
}
inline void PBWorkerCommandRequest::set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandRequest.user_handle)
}

// -------------------------------------------------------------------

// PBWorkerCommandResponse

// optional bytes reserved = 1;
inline bool PBWorkerCommandResponse::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorkerCommandResponse::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorkerCommandResponse::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorkerCommandResponse::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandResponse.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorkerCommandResponse::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorkerCommandResponse.reserved)
}
inline std::string* PBWorkerCommandResponse::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandResponse.reserved)
  return _s;
}
inline const std::string& PBWorkerCommandResponse::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorkerCommandResponse::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorkerCommandResponse::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorkerCommandResponse::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandResponse.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorkerCommandResponse::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandResponse.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorkerCommandResponse::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorkerCommandResponse::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorkerCommandResponse::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorkerCommandResponse::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorkerCommandResponse::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandResponse.component_id)
  return _internal_component_id();
}
inline void PBWorkerCommandResponse::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorkerCommandResponse::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorkerCommandResponse.component_id)
}

// optional .PBSchemaComponentData schema_type = 3;
inline bool PBWorkerCommandResponse::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorkerCommandResponse::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorkerCommandResponse::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchemaComponentData& PBWorkerCommandResponse::_internal_schema_type() const {
  const ::PBSchemaComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchemaComponentData&>(
      ::_PBSchemaComponentData_default_instance_);
}
inline const ::PBSchemaComponentData& PBWorkerCommandResponse::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandResponse.schema_type)
  return _internal_schema_type();
}
inline void PBWorkerCommandResponse::unsafe_arena_set_allocated_schema_type(
    ::PBSchemaComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerCommandResponse.schema_type)
}
inline ::PBSchemaComponentData* PBWorkerCommandResponse::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerCommandResponse::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandResponse.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchemaComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchemaComponentData* PBWorkerCommandResponse::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchemaComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchemaComponentData* PBWorkerCommandResponse::mutable_schema_type() {
  ::PBSchemaComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandResponse.schema_type)
  return _msg;
}
inline void PBWorkerCommandResponse::set_allocated_schema_type(::PBSchemaComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandResponse.schema_type)
}

// optional .PBWorkerComponentDataHandle user_handle = 4;
inline bool PBWorkerCommandResponse::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorkerCommandResponse::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorkerCommandResponse::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorkerComponentDataHandle& PBWorkerCommandResponse::_internal_user_handle() const {
  const ::PBWorkerComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorkerComponentDataHandle&>(
      ::_PBWorkerComponentDataHandle_default_instance_);
}
inline const ::PBWorkerComponentDataHandle& PBWorkerCommandResponse::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorkerCommandResponse.user_handle)
  return _internal_user_handle();
}
inline void PBWorkerCommandResponse::unsafe_arena_set_allocated_user_handle(
    ::PBWorkerComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorkerCommandResponse.user_handle)
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandResponse::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandResponse::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorkerCommandResponse.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorkerComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandResponse::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorkerComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorkerComponentDataHandle* PBWorkerCommandResponse::mutable_user_handle() {
  ::PBWorkerComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorkerCommandResponse.user_handle)
  return _msg;
}
inline void PBWorkerCommandResponse::set_allocated_user_handle(::PBWorkerComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorkerCommandResponse.user_handle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PBWorkerStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBWorkerStatusCode>() {
  return ::PBWorkerStatusCode_descriptor();
}
template <> struct is_proto_enum< ::PBWorkerAuthority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBWorkerAuthority>() {
  return ::PBWorkerAuthority_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto
