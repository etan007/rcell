// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WorkerData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WorkerData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WorkerData_2eproto;
class PBSchema_ComponentData;
struct PBSchema_ComponentDataDefaultTypeInternal;
extern PBSchema_ComponentDataDefaultTypeInternal _PBSchema_ComponentData_default_instance_;
class PBWorker_CommandRequest;
struct PBWorker_CommandRequestDefaultTypeInternal;
extern PBWorker_CommandRequestDefaultTypeInternal _PBWorker_CommandRequest_default_instance_;
class PBWorker_CommandResponse;
struct PBWorker_CommandResponseDefaultTypeInternal;
extern PBWorker_CommandResponseDefaultTypeInternal _PBWorker_CommandResponse_default_instance_;
class PBWorker_ComponentData;
struct PBWorker_ComponentDataDefaultTypeInternal;
extern PBWorker_ComponentDataDefaultTypeInternal _PBWorker_ComponentData_default_instance_;
class PBWorker_ComponentDataHandle;
struct PBWorker_ComponentDataHandleDefaultTypeInternal;
extern PBWorker_ComponentDataHandleDefaultTypeInternal _PBWorker_ComponentDataHandle_default_instance_;
class PBWorker_ComponentUpdate;
struct PBWorker_ComponentUpdateDefaultTypeInternal;
extern PBWorker_ComponentUpdateDefaultTypeInternal _PBWorker_ComponentUpdate_default_instance_;
class PBWorker_Entity;
struct PBWorker_EntityDefaultTypeInternal;
extern PBWorker_EntityDefaultTypeInternal _PBWorker_Entity_default_instance_;
class PBWorker_GaugeMetric;
struct PBWorker_GaugeMetricDefaultTypeInternal;
extern PBWorker_GaugeMetricDefaultTypeInternal _PBWorker_GaugeMetric_default_instance_;
class PBWorker_HistogramMetric;
struct PBWorker_HistogramMetricDefaultTypeInternal;
extern PBWorker_HistogramMetricDefaultTypeInternal _PBWorker_HistogramMetric_default_instance_;
class PBWorker_HistogramMetricBucket;
struct PBWorker_HistogramMetricBucketDefaultTypeInternal;
extern PBWorker_HistogramMetricBucketDefaultTypeInternal _PBWorker_HistogramMetricBucket_default_instance_;
class PBWorker_Metrics;
struct PBWorker_MetricsDefaultTypeInternal;
extern PBWorker_MetricsDefaultTypeInternal _PBWorker_Metrics_default_instance_;
class PBWorker_WorkerAttributes;
struct PBWorker_WorkerAttributesDefaultTypeInternal;
extern PBWorker_WorkerAttributesDefaultTypeInternal _PBWorker_WorkerAttributes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBSchema_ComponentData* Arena::CreateMaybeMessage<::PBSchema_ComponentData>(Arena*);
template<> ::PBWorker_CommandRequest* Arena::CreateMaybeMessage<::PBWorker_CommandRequest>(Arena*);
template<> ::PBWorker_CommandResponse* Arena::CreateMaybeMessage<::PBWorker_CommandResponse>(Arena*);
template<> ::PBWorker_ComponentData* Arena::CreateMaybeMessage<::PBWorker_ComponentData>(Arena*);
template<> ::PBWorker_ComponentDataHandle* Arena::CreateMaybeMessage<::PBWorker_ComponentDataHandle>(Arena*);
template<> ::PBWorker_ComponentUpdate* Arena::CreateMaybeMessage<::PBWorker_ComponentUpdate>(Arena*);
template<> ::PBWorker_Entity* Arena::CreateMaybeMessage<::PBWorker_Entity>(Arena*);
template<> ::PBWorker_GaugeMetric* Arena::CreateMaybeMessage<::PBWorker_GaugeMetric>(Arena*);
template<> ::PBWorker_HistogramMetric* Arena::CreateMaybeMessage<::PBWorker_HistogramMetric>(Arena*);
template<> ::PBWorker_HistogramMetricBucket* Arena::CreateMaybeMessage<::PBWorker_HistogramMetricBucket>(Arena*);
template<> ::PBWorker_Metrics* Arena::CreateMaybeMessage<::PBWorker_Metrics>(Arena*);
template<> ::PBWorker_WorkerAttributes* Arena::CreateMaybeMessage<::PBWorker_WorkerAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PBWorker_StatusCode : int {
  WORKER_STATUS_CODE_SUCCESS = 1,
  WORKER_STATUS_CODE_TIMEOUT = 2,
  WORKER_STATUS_CODE_NOT_FOUND = 3,
  WORKER_STATUS_CODE_AUTHORITY_LOST = 4,
  WORKER_STATUS_CODE_PERMISSION_DENIED = 5,
  WORKER_STATUS_CODE_APPLICATION_ERROR = 6,
  WORKER_STATUS_CODE_INTERNAL_ERROR = 7
};
bool PBWorker_StatusCode_IsValid(int value);
constexpr PBWorker_StatusCode PBWorker_StatusCode_MIN = WORKER_STATUS_CODE_SUCCESS;
constexpr PBWorker_StatusCode PBWorker_StatusCode_MAX = WORKER_STATUS_CODE_INTERNAL_ERROR;
constexpr int PBWorker_StatusCode_ARRAYSIZE = PBWorker_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorker_StatusCode_descriptor();
template<typename T>
inline const std::string& PBWorker_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBWorker_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBWorker_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBWorker_StatusCode_descriptor(), enum_t_value);
}
inline bool PBWorker_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBWorker_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBWorker_StatusCode>(
    PBWorker_StatusCode_descriptor(), name, value);
}
enum PBWorker_Authority : int {
  WORKER_AUTHORITY_NOT_AUTHORITATIVE = 0,
  WORKER_AUTHORITY_AUTHORITATIVE = 1,
  WORKER_AUTHORITY_AUTHORITY_LOSS_IMMINENT = 2
};
bool PBWorker_Authority_IsValid(int value);
constexpr PBWorker_Authority PBWorker_Authority_MIN = WORKER_AUTHORITY_NOT_AUTHORITATIVE;
constexpr PBWorker_Authority PBWorker_Authority_MAX = WORKER_AUTHORITY_AUTHORITY_LOSS_IMMINENT;
constexpr int PBWorker_Authority_ARRAYSIZE = PBWorker_Authority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PBWorker_Authority_descriptor();
template<typename T>
inline const std::string& PBWorker_Authority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PBWorker_Authority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PBWorker_Authority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PBWorker_Authority_descriptor(), enum_t_value);
}
inline bool PBWorker_Authority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PBWorker_Authority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PBWorker_Authority>(
    PBWorker_Authority_descriptor(), name, value);
}
// ===================================================================

class PBWorker_GaugeMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_GaugeMetric) */ {
 public:
  inline PBWorker_GaugeMetric() : PBWorker_GaugeMetric(nullptr) {}
  ~PBWorker_GaugeMetric() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_GaugeMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_GaugeMetric(const PBWorker_GaugeMetric& from);
  PBWorker_GaugeMetric(PBWorker_GaugeMetric&& from) noexcept
    : PBWorker_GaugeMetric() {
    *this = ::std::move(from);
  }

  inline PBWorker_GaugeMetric& operator=(const PBWorker_GaugeMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_GaugeMetric& operator=(PBWorker_GaugeMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_GaugeMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_GaugeMetric* internal_default_instance() {
    return reinterpret_cast<const PBWorker_GaugeMetric*>(
               &_PBWorker_GaugeMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBWorker_GaugeMetric& a, PBWorker_GaugeMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_GaugeMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_GaugeMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_GaugeMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_GaugeMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_GaugeMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_GaugeMetric& from) {
    PBWorker_GaugeMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_GaugeMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_GaugeMetric";
  }
  protected:
  explicit PBWorker_GaugeMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_GaugeMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    double value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_HistogramMetricBucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_HistogramMetricBucket) */ {
 public:
  inline PBWorker_HistogramMetricBucket() : PBWorker_HistogramMetricBucket(nullptr) {}
  ~PBWorker_HistogramMetricBucket() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_HistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_HistogramMetricBucket(const PBWorker_HistogramMetricBucket& from);
  PBWorker_HistogramMetricBucket(PBWorker_HistogramMetricBucket&& from) noexcept
    : PBWorker_HistogramMetricBucket() {
    *this = ::std::move(from);
  }

  inline PBWorker_HistogramMetricBucket& operator=(const PBWorker_HistogramMetricBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_HistogramMetricBucket& operator=(PBWorker_HistogramMetricBucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_HistogramMetricBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_HistogramMetricBucket* internal_default_instance() {
    return reinterpret_cast<const PBWorker_HistogramMetricBucket*>(
               &_PBWorker_HistogramMetricBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBWorker_HistogramMetricBucket& a, PBWorker_HistogramMetricBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_HistogramMetricBucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_HistogramMetricBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_HistogramMetricBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_HistogramMetricBucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_HistogramMetricBucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_HistogramMetricBucket& from) {
    PBWorker_HistogramMetricBucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_HistogramMetricBucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_HistogramMetricBucket";
  }
  protected:
  explicit PBWorker_HistogramMetricBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperBoundFieldNumber = 1,
    kSamplesFieldNumber = 2,
  };
  // optional double upper_bound = 1;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  double upper_bound() const;
  void set_upper_bound(double value);
  private:
  double _internal_upper_bound() const;
  void _internal_set_upper_bound(double value);
  public:

  // optional uint32 samples = 2;
  bool has_samples() const;
  private:
  bool _internal_has_samples() const;
  public:
  void clear_samples();
  uint32_t samples() const;
  void set_samples(uint32_t value);
  private:
  uint32_t _internal_samples() const;
  void _internal_set_samples(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_HistogramMetricBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double upper_bound_;
    uint32_t samples_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_HistogramMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_HistogramMetric) */ {
 public:
  inline PBWorker_HistogramMetric() : PBWorker_HistogramMetric(nullptr) {}
  ~PBWorker_HistogramMetric() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_HistogramMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_HistogramMetric(const PBWorker_HistogramMetric& from);
  PBWorker_HistogramMetric(PBWorker_HistogramMetric&& from) noexcept
    : PBWorker_HistogramMetric() {
    *this = ::std::move(from);
  }

  inline PBWorker_HistogramMetric& operator=(const PBWorker_HistogramMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_HistogramMetric& operator=(PBWorker_HistogramMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_HistogramMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_HistogramMetric* internal_default_instance() {
    return reinterpret_cast<const PBWorker_HistogramMetric*>(
               &_PBWorker_HistogramMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBWorker_HistogramMetric& a, PBWorker_HistogramMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_HistogramMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_HistogramMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_HistogramMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_HistogramMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_HistogramMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_HistogramMetric& from) {
    PBWorker_HistogramMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_HistogramMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_HistogramMetric";
  }
  protected:
  explicit PBWorker_HistogramMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 4,
    kKeyFieldNumber = 1,
    kSumFieldNumber = 2,
    kBucketCountFieldNumber = 3,
  };
  // repeated .PBWorker_HistogramMetricBucket buckets = 4;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::PBWorker_HistogramMetricBucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetricBucket >*
      mutable_buckets();
  private:
  const ::PBWorker_HistogramMetricBucket& _internal_buckets(int index) const;
  ::PBWorker_HistogramMetricBucket* _internal_add_buckets();
  public:
  const ::PBWorker_HistogramMetricBucket& buckets(int index) const;
  ::PBWorker_HistogramMetricBucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetricBucket >&
      buckets() const;

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional double sum = 2;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // optional uint32 bucket_count = 3;
  bool has_bucket_count() const;
  private:
  bool _internal_has_bucket_count() const;
  public:
  void clear_bucket_count();
  uint32_t bucket_count() const;
  void set_bucket_count(uint32_t value);
  private:
  uint32_t _internal_bucket_count() const;
  void _internal_set_bucket_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_HistogramMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetricBucket > buckets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    double sum_;
    uint32_t bucket_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_Metrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_Metrics) */ {
 public:
  inline PBWorker_Metrics() : PBWorker_Metrics(nullptr) {}
  ~PBWorker_Metrics() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_Metrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_Metrics(const PBWorker_Metrics& from);
  PBWorker_Metrics(PBWorker_Metrics&& from) noexcept
    : PBWorker_Metrics() {
    *this = ::std::move(from);
  }

  inline PBWorker_Metrics& operator=(const PBWorker_Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_Metrics& operator=(PBWorker_Metrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_Metrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_Metrics* internal_default_instance() {
    return reinterpret_cast<const PBWorker_Metrics*>(
               &_PBWorker_Metrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBWorker_Metrics& a, PBWorker_Metrics& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_Metrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_Metrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_Metrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_Metrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_Metrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_Metrics& from) {
    PBWorker_Metrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_Metrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_Metrics";
  }
  protected:
  explicit PBWorker_Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGaugeMetricsFieldNumber = 3,
    kHistogramMetricsFieldNumber = 5,
    kLoadFieldNumber = 1,
    kGaugeMetricCountFieldNumber = 2,
    kHistogramMetricCountFieldNumber = 4,
  };
  // repeated .PBWorker_GaugeMetric gauge_metrics = 3;
  int gauge_metrics_size() const;
  private:
  int _internal_gauge_metrics_size() const;
  public:
  void clear_gauge_metrics();
  ::PBWorker_GaugeMetric* mutable_gauge_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_GaugeMetric >*
      mutable_gauge_metrics();
  private:
  const ::PBWorker_GaugeMetric& _internal_gauge_metrics(int index) const;
  ::PBWorker_GaugeMetric* _internal_add_gauge_metrics();
  public:
  const ::PBWorker_GaugeMetric& gauge_metrics(int index) const;
  ::PBWorker_GaugeMetric* add_gauge_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_GaugeMetric >&
      gauge_metrics() const;

  // repeated .PBWorker_HistogramMetric histogram_metrics = 5;
  int histogram_metrics_size() const;
  private:
  int _internal_histogram_metrics_size() const;
  public:
  void clear_histogram_metrics();
  ::PBWorker_HistogramMetric* mutable_histogram_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetric >*
      mutable_histogram_metrics();
  private:
  const ::PBWorker_HistogramMetric& _internal_histogram_metrics(int index) const;
  ::PBWorker_HistogramMetric* _internal_add_histogram_metrics();
  public:
  const ::PBWorker_HistogramMetric& histogram_metrics(int index) const;
  ::PBWorker_HistogramMetric* add_histogram_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetric >&
      histogram_metrics() const;

  // optional double load = 1;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  double load() const;
  void set_load(double value);
  private:
  double _internal_load() const;
  void _internal_set_load(double value);
  public:

  // optional uint32 gauge_metric_count = 2;
  bool has_gauge_metric_count() const;
  private:
  bool _internal_has_gauge_metric_count() const;
  public:
  void clear_gauge_metric_count();
  uint32_t gauge_metric_count() const;
  void set_gauge_metric_count(uint32_t value);
  private:
  uint32_t _internal_gauge_metric_count() const;
  void _internal_set_gauge_metric_count(uint32_t value);
  public:

  // optional uint32 histogram_metric_count = 4;
  bool has_histogram_metric_count() const;
  private:
  bool _internal_has_histogram_metric_count() const;
  public:
  void clear_histogram_metric_count();
  uint32_t histogram_metric_count() const;
  void set_histogram_metric_count(uint32_t value);
  private:
  uint32_t _internal_histogram_metric_count() const;
  void _internal_set_histogram_metric_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_Metrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_GaugeMetric > gauge_metrics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetric > histogram_metrics_;
    double load_;
    uint32_t gauge_metric_count_;
    uint32_t histogram_metric_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBSchema_ComponentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBSchema_ComponentData) */ {
 public:
  inline PBSchema_ComponentData() : PBSchema_ComponentData(nullptr) {}
  ~PBSchema_ComponentData() override;
  explicit PROTOBUF_CONSTEXPR PBSchema_ComponentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBSchema_ComponentData(const PBSchema_ComponentData& from);
  PBSchema_ComponentData(PBSchema_ComponentData&& from) noexcept
    : PBSchema_ComponentData() {
    *this = ::std::move(from);
  }

  inline PBSchema_ComponentData& operator=(const PBSchema_ComponentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBSchema_ComponentData& operator=(PBSchema_ComponentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBSchema_ComponentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBSchema_ComponentData* internal_default_instance() {
    return reinterpret_cast<const PBSchema_ComponentData*>(
               &_PBSchema_ComponentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBSchema_ComponentData& a, PBSchema_ComponentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBSchema_ComponentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBSchema_ComponentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBSchema_ComponentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBSchema_ComponentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBSchema_ComponentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBSchema_ComponentData& from) {
    PBSchema_ComponentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBSchema_ComponentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBSchema_ComponentData";
  }
  protected:
  explicit PBSchema_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSchemaIdFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 schema_id = 1;
  bool has_schema_id() const;
  private:
  bool _internal_has_schema_id() const;
  public:
  void clear_schema_id();
  uint32_t schema_id() const;
  void set_schema_id(uint32_t value);
  private:
  uint32_t _internal_schema_id() const;
  void _internal_set_schema_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBSchema_ComponentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t schema_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_ComponentDataHandle final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PBWorker_ComponentDataHandle) */ {
 public:
  inline PBWorker_ComponentDataHandle() : PBWorker_ComponentDataHandle(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PBWorker_ComponentDataHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_ComponentDataHandle(const PBWorker_ComponentDataHandle& from);
  PBWorker_ComponentDataHandle(PBWorker_ComponentDataHandle&& from) noexcept
    : PBWorker_ComponentDataHandle() {
    *this = ::std::move(from);
  }

  inline PBWorker_ComponentDataHandle& operator=(const PBWorker_ComponentDataHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_ComponentDataHandle& operator=(PBWorker_ComponentDataHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_ComponentDataHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_ComponentDataHandle* internal_default_instance() {
    return reinterpret_cast<const PBWorker_ComponentDataHandle*>(
               &_PBWorker_ComponentDataHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PBWorker_ComponentDataHandle& a, PBWorker_ComponentDataHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_ComponentDataHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_ComponentDataHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_ComponentDataHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_ComponentDataHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PBWorker_ComponentDataHandle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PBWorker_ComponentDataHandle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_ComponentDataHandle";
  }
  protected:
  explicit PBWorker_ComponentDataHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PBWorker_ComponentDataHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_ComponentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_ComponentData) */ {
 public:
  inline PBWorker_ComponentData() : PBWorker_ComponentData(nullptr) {}
  ~PBWorker_ComponentData() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_ComponentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_ComponentData(const PBWorker_ComponentData& from);
  PBWorker_ComponentData(PBWorker_ComponentData&& from) noexcept
    : PBWorker_ComponentData() {
    *this = ::std::move(from);
  }

  inline PBWorker_ComponentData& operator=(const PBWorker_ComponentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_ComponentData& operator=(PBWorker_ComponentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_ComponentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_ComponentData* internal_default_instance() {
    return reinterpret_cast<const PBWorker_ComponentData*>(
               &_PBWorker_ComponentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PBWorker_ComponentData& a, PBWorker_ComponentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_ComponentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_ComponentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_ComponentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_ComponentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_ComponentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_ComponentData& from) {
    PBWorker_ComponentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_ComponentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_ComponentData";
  }
  protected:
  explicit PBWorker_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchema_ComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchema_ComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchema_ComponentData* release_schema_type();
  ::PBSchema_ComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchema_ComponentData* schema_type);
  private:
  const ::PBSchema_ComponentData& _internal_schema_type() const;
  ::PBSchema_ComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchema_ComponentData* schema_type);
  ::PBSchema_ComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorker_ComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorker_ComponentDataHandle* release_user_handle();
  ::PBWorker_ComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle);
  private:
  const ::PBWorker_ComponentDataHandle& _internal_user_handle() const;
  ::PBWorker_ComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorker_ComponentDataHandle* user_handle);
  ::PBWorker_ComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_ComponentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchema_ComponentData* schema_type_;
    ::PBWorker_ComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_Entity) */ {
 public:
  inline PBWorker_Entity() : PBWorker_Entity(nullptr) {}
  ~PBWorker_Entity() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_Entity(const PBWorker_Entity& from);
  PBWorker_Entity(PBWorker_Entity&& from) noexcept
    : PBWorker_Entity() {
    *this = ::std::move(from);
  }

  inline PBWorker_Entity& operator=(const PBWorker_Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_Entity& operator=(PBWorker_Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_Entity* internal_default_instance() {
    return reinterpret_cast<const PBWorker_Entity*>(
               &_PBWorker_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PBWorker_Entity& a, PBWorker_Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_Entity& from) {
    PBWorker_Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_Entity";
  }
  protected:
  explicit PBWorker_Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 3,
    kEntityIdFieldNumber = 1,
    kComponentCountFieldNumber = 2,
  };
  // repeated .PBWorker_ComponentData components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::PBWorker_ComponentData* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_ComponentData >*
      mutable_components();
  private:
  const ::PBWorker_ComponentData& _internal_components(int index) const;
  ::PBWorker_ComponentData* _internal_add_components();
  public:
  const ::PBWorker_ComponentData& components(int index) const;
  ::PBWorker_ComponentData* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_ComponentData >&
      components() const;

  // optional int64 entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  int64_t entity_id() const;
  void set_entity_id(int64_t value);
  private:
  int64_t _internal_entity_id() const;
  void _internal_set_entity_id(int64_t value);
  public:

  // optional uint32 component_count = 2;
  bool has_component_count() const;
  private:
  bool _internal_has_component_count() const;
  public:
  void clear_component_count();
  uint32_t component_count() const;
  void set_component_count(uint32_t value);
  private:
  uint32_t _internal_component_count() const;
  void _internal_set_component_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_ComponentData > components_;
    int64_t entity_id_;
    uint32_t component_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_ComponentUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_ComponentUpdate) */ {
 public:
  inline PBWorker_ComponentUpdate() : PBWorker_ComponentUpdate(nullptr) {}
  ~PBWorker_ComponentUpdate() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_ComponentUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_ComponentUpdate(const PBWorker_ComponentUpdate& from);
  PBWorker_ComponentUpdate(PBWorker_ComponentUpdate&& from) noexcept
    : PBWorker_ComponentUpdate() {
    *this = ::std::move(from);
  }

  inline PBWorker_ComponentUpdate& operator=(const PBWorker_ComponentUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_ComponentUpdate& operator=(PBWorker_ComponentUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_ComponentUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_ComponentUpdate* internal_default_instance() {
    return reinterpret_cast<const PBWorker_ComponentUpdate*>(
               &_PBWorker_ComponentUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PBWorker_ComponentUpdate& a, PBWorker_ComponentUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_ComponentUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_ComponentUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_ComponentUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_ComponentUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_ComponentUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_ComponentUpdate& from) {
    PBWorker_ComponentUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_ComponentUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_ComponentUpdate";
  }
  protected:
  explicit PBWorker_ComponentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchema_ComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchema_ComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchema_ComponentData* release_schema_type();
  ::PBSchema_ComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchema_ComponentData* schema_type);
  private:
  const ::PBSchema_ComponentData& _internal_schema_type() const;
  ::PBSchema_ComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchema_ComponentData* schema_type);
  ::PBSchema_ComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorker_ComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorker_ComponentDataHandle* release_user_handle();
  ::PBWorker_ComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle);
  private:
  const ::PBWorker_ComponentDataHandle& _internal_user_handle() const;
  ::PBWorker_ComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorker_ComponentDataHandle* user_handle);
  ::PBWorker_ComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_ComponentUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchema_ComponentData* schema_type_;
    ::PBWorker_ComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_WorkerAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_WorkerAttributes) */ {
 public:
  inline PBWorker_WorkerAttributes() : PBWorker_WorkerAttributes(nullptr) {}
  ~PBWorker_WorkerAttributes() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_WorkerAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_WorkerAttributes(const PBWorker_WorkerAttributes& from);
  PBWorker_WorkerAttributes(PBWorker_WorkerAttributes&& from) noexcept
    : PBWorker_WorkerAttributes() {
    *this = ::std::move(from);
  }

  inline PBWorker_WorkerAttributes& operator=(const PBWorker_WorkerAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_WorkerAttributes& operator=(PBWorker_WorkerAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_WorkerAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_WorkerAttributes* internal_default_instance() {
    return reinterpret_cast<const PBWorker_WorkerAttributes*>(
               &_PBWorker_WorkerAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PBWorker_WorkerAttributes& a, PBWorker_WorkerAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_WorkerAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_WorkerAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_WorkerAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_WorkerAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_WorkerAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_WorkerAttributes& from) {
    PBWorker_WorkerAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_WorkerAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_WorkerAttributes";
  }
  protected:
  explicit PBWorker_WorkerAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kAttributeCountFieldNumber = 1,
  };
  // repeated bytes attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const void* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // optional uint32 attribute_count = 1;
  bool has_attribute_count() const;
  private:
  bool _internal_has_attribute_count() const;
  public:
  void clear_attribute_count();
  uint32_t attribute_count() const;
  void set_attribute_count(uint32_t value);
  private:
  uint32_t _internal_attribute_count() const;
  void _internal_set_attribute_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_WorkerAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
    uint32_t attribute_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_CommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_CommandRequest) */ {
 public:
  inline PBWorker_CommandRequest() : PBWorker_CommandRequest(nullptr) {}
  ~PBWorker_CommandRequest() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_CommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_CommandRequest(const PBWorker_CommandRequest& from);
  PBWorker_CommandRequest(PBWorker_CommandRequest&& from) noexcept
    : PBWorker_CommandRequest() {
    *this = ::std::move(from);
  }

  inline PBWorker_CommandRequest& operator=(const PBWorker_CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_CommandRequest& operator=(PBWorker_CommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_CommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_CommandRequest* internal_default_instance() {
    return reinterpret_cast<const PBWorker_CommandRequest*>(
               &_PBWorker_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PBWorker_CommandRequest& a, PBWorker_CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_CommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_CommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_CommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_CommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_CommandRequest& from) {
    PBWorker_CommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_CommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_CommandRequest";
  }
  protected:
  explicit PBWorker_CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchema_ComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchema_ComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchema_ComponentData* release_schema_type();
  ::PBSchema_ComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchema_ComponentData* schema_type);
  private:
  const ::PBSchema_ComponentData& _internal_schema_type() const;
  ::PBSchema_ComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchema_ComponentData* schema_type);
  ::PBSchema_ComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorker_ComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorker_ComponentDataHandle* release_user_handle();
  ::PBWorker_ComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle);
  private:
  const ::PBWorker_ComponentDataHandle& _internal_user_handle() const;
  ::PBWorker_ComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorker_ComponentDataHandle* user_handle);
  ::PBWorker_ComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_CommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchema_ComponentData* schema_type_;
    ::PBWorker_ComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// -------------------------------------------------------------------

class PBWorker_CommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBWorker_CommandResponse) */ {
 public:
  inline PBWorker_CommandResponse() : PBWorker_CommandResponse(nullptr) {}
  ~PBWorker_CommandResponse() override;
  explicit PROTOBUF_CONSTEXPR PBWorker_CommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBWorker_CommandResponse(const PBWorker_CommandResponse& from);
  PBWorker_CommandResponse(PBWorker_CommandResponse&& from) noexcept
    : PBWorker_CommandResponse() {
    *this = ::std::move(from);
  }

  inline PBWorker_CommandResponse& operator=(const PBWorker_CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBWorker_CommandResponse& operator=(PBWorker_CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBWorker_CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBWorker_CommandResponse* internal_default_instance() {
    return reinterpret_cast<const PBWorker_CommandResponse*>(
               &_PBWorker_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PBWorker_CommandResponse& a, PBWorker_CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PBWorker_CommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBWorker_CommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBWorker_CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBWorker_CommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBWorker_CommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBWorker_CommandResponse& from) {
    PBWorker_CommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBWorker_CommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBWorker_CommandResponse";
  }
  protected:
  explicit PBWorker_CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSchemaTypeFieldNumber = 3,
    kUserHandleFieldNumber = 4,
    kComponentIdFieldNumber = 2,
  };
  // optional bytes reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const std::string& reserved() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserved(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserved();
  PROTOBUF_NODISCARD std::string* release_reserved();
  void set_allocated_reserved(std::string* reserved);
  private:
  const std::string& _internal_reserved() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserved(const std::string& value);
  std::string* _internal_mutable_reserved();
  public:

  // optional .PBSchema_ComponentData schema_type = 3;
  bool has_schema_type() const;
  private:
  bool _internal_has_schema_type() const;
  public:
  void clear_schema_type();
  const ::PBSchema_ComponentData& schema_type() const;
  PROTOBUF_NODISCARD ::PBSchema_ComponentData* release_schema_type();
  ::PBSchema_ComponentData* mutable_schema_type();
  void set_allocated_schema_type(::PBSchema_ComponentData* schema_type);
  private:
  const ::PBSchema_ComponentData& _internal_schema_type() const;
  ::PBSchema_ComponentData* _internal_mutable_schema_type();
  public:
  void unsafe_arena_set_allocated_schema_type(
      ::PBSchema_ComponentData* schema_type);
  ::PBSchema_ComponentData* unsafe_arena_release_schema_type();

  // optional .PBWorker_ComponentDataHandle user_handle = 4;
  bool has_user_handle() const;
  private:
  bool _internal_has_user_handle() const;
  public:
  void clear_user_handle();
  const ::PBWorker_ComponentDataHandle& user_handle() const;
  PROTOBUF_NODISCARD ::PBWorker_ComponentDataHandle* release_user_handle();
  ::PBWorker_ComponentDataHandle* mutable_user_handle();
  void set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle);
  private:
  const ::PBWorker_ComponentDataHandle& _internal_user_handle() const;
  ::PBWorker_ComponentDataHandle* _internal_mutable_user_handle();
  public:
  void unsafe_arena_set_allocated_user_handle(
      ::PBWorker_ComponentDataHandle* user_handle);
  ::PBWorker_ComponentDataHandle* unsafe_arena_release_user_handle();

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  uint32_t component_id() const;
  void set_component_id(uint32_t value);
  private:
  uint32_t _internal_component_id() const;
  void _internal_set_component_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PBWorker_CommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_;
    ::PBSchema_ComponentData* schema_type_;
    ::PBWorker_ComponentDataHandle* user_handle_;
    uint32_t component_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_WorkerData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBWorker_GaugeMetric

// optional string key = 1;
inline bool PBWorker_GaugeMetric::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_GaugeMetric::has_key() const {
  return _internal_has_key();
}
inline void PBWorker_GaugeMetric::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_GaugeMetric::key() const {
  // @@protoc_insertion_point(field_get:PBWorker_GaugeMetric.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_GaugeMetric::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_GaugeMetric.key)
}
inline std::string* PBWorker_GaugeMetric::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PBWorker_GaugeMetric.key)
  return _s;
}
inline const std::string& PBWorker_GaugeMetric::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PBWorker_GaugeMetric::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_GaugeMetric::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_GaugeMetric::release_key() {
  // @@protoc_insertion_point(field_release:PBWorker_GaugeMetric.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_GaugeMetric::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_GaugeMetric.key)
}

// optional double value = 2;
inline bool PBWorker_GaugeMetric::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorker_GaugeMetric::has_value() const {
  return _internal_has_value();
}
inline void PBWorker_GaugeMetric::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PBWorker_GaugeMetric::_internal_value() const {
  return _impl_.value_;
}
inline double PBWorker_GaugeMetric::value() const {
  // @@protoc_insertion_point(field_get:PBWorker_GaugeMetric.value)
  return _internal_value();
}
inline void PBWorker_GaugeMetric::_internal_set_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void PBWorker_GaugeMetric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PBWorker_GaugeMetric.value)
}

// -------------------------------------------------------------------

// PBWorker_HistogramMetricBucket

// optional double upper_bound = 1;
inline bool PBWorker_HistogramMetricBucket::_internal_has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_HistogramMetricBucket::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void PBWorker_HistogramMetricBucket::clear_upper_bound() {
  _impl_.upper_bound_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PBWorker_HistogramMetricBucket::_internal_upper_bound() const {
  return _impl_.upper_bound_;
}
inline double PBWorker_HistogramMetricBucket::upper_bound() const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetricBucket.upper_bound)
  return _internal_upper_bound();
}
inline void PBWorker_HistogramMetricBucket::_internal_set_upper_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.upper_bound_ = value;
}
inline void PBWorker_HistogramMetricBucket::set_upper_bound(double value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:PBWorker_HistogramMetricBucket.upper_bound)
}

// optional uint32 samples = 2;
inline bool PBWorker_HistogramMetricBucket::_internal_has_samples() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorker_HistogramMetricBucket::has_samples() const {
  return _internal_has_samples();
}
inline void PBWorker_HistogramMetricBucket::clear_samples() {
  _impl_.samples_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorker_HistogramMetricBucket::_internal_samples() const {
  return _impl_.samples_;
}
inline uint32_t PBWorker_HistogramMetricBucket::samples() const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetricBucket.samples)
  return _internal_samples();
}
inline void PBWorker_HistogramMetricBucket::_internal_set_samples(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.samples_ = value;
}
inline void PBWorker_HistogramMetricBucket::set_samples(uint32_t value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:PBWorker_HistogramMetricBucket.samples)
}

// -------------------------------------------------------------------

// PBWorker_HistogramMetric

// optional string key = 1;
inline bool PBWorker_HistogramMetric::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_HistogramMetric::has_key() const {
  return _internal_has_key();
}
inline void PBWorker_HistogramMetric::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_HistogramMetric::key() const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetric.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_HistogramMetric::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_HistogramMetric.key)
}
inline std::string* PBWorker_HistogramMetric::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PBWorker_HistogramMetric.key)
  return _s;
}
inline const std::string& PBWorker_HistogramMetric::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PBWorker_HistogramMetric::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_HistogramMetric::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_HistogramMetric::release_key() {
  // @@protoc_insertion_point(field_release:PBWorker_HistogramMetric.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_HistogramMetric::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_HistogramMetric.key)
}

// optional double sum = 2;
inline bool PBWorker_HistogramMetric::_internal_has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorker_HistogramMetric::has_sum() const {
  return _internal_has_sum();
}
inline void PBWorker_HistogramMetric::clear_sum() {
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PBWorker_HistogramMetric::_internal_sum() const {
  return _impl_.sum_;
}
inline double PBWorker_HistogramMetric::sum() const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetric.sum)
  return _internal_sum();
}
inline void PBWorker_HistogramMetric::_internal_set_sum(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sum_ = value;
}
inline void PBWorker_HistogramMetric::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:PBWorker_HistogramMetric.sum)
}

// optional uint32 bucket_count = 3;
inline bool PBWorker_HistogramMetric::_internal_has_bucket_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBWorker_HistogramMetric::has_bucket_count() const {
  return _internal_has_bucket_count();
}
inline void PBWorker_HistogramMetric::clear_bucket_count() {
  _impl_.bucket_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PBWorker_HistogramMetric::_internal_bucket_count() const {
  return _impl_.bucket_count_;
}
inline uint32_t PBWorker_HistogramMetric::bucket_count() const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetric.bucket_count)
  return _internal_bucket_count();
}
inline void PBWorker_HistogramMetric::_internal_set_bucket_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bucket_count_ = value;
}
inline void PBWorker_HistogramMetric::set_bucket_count(uint32_t value) {
  _internal_set_bucket_count(value);
  // @@protoc_insertion_point(field_set:PBWorker_HistogramMetric.bucket_count)
}

// repeated .PBWorker_HistogramMetricBucket buckets = 4;
inline int PBWorker_HistogramMetric::_internal_buckets_size() const {
  return _impl_.buckets_.size();
}
inline int PBWorker_HistogramMetric::buckets_size() const {
  return _internal_buckets_size();
}
inline void PBWorker_HistogramMetric::clear_buckets() {
  _impl_.buckets_.Clear();
}
inline ::PBWorker_HistogramMetricBucket* PBWorker_HistogramMetric::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorker_HistogramMetric.buckets)
  return _impl_.buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetricBucket >*
PBWorker_HistogramMetric::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:PBWorker_HistogramMetric.buckets)
  return &_impl_.buckets_;
}
inline const ::PBWorker_HistogramMetricBucket& PBWorker_HistogramMetric::_internal_buckets(int index) const {
  return _impl_.buckets_.Get(index);
}
inline const ::PBWorker_HistogramMetricBucket& PBWorker_HistogramMetric::buckets(int index) const {
  // @@protoc_insertion_point(field_get:PBWorker_HistogramMetric.buckets)
  return _internal_buckets(index);
}
inline ::PBWorker_HistogramMetricBucket* PBWorker_HistogramMetric::_internal_add_buckets() {
  return _impl_.buckets_.Add();
}
inline ::PBWorker_HistogramMetricBucket* PBWorker_HistogramMetric::add_buckets() {
  ::PBWorker_HistogramMetricBucket* _add = _internal_add_buckets();
  // @@protoc_insertion_point(field_add:PBWorker_HistogramMetric.buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetricBucket >&
PBWorker_HistogramMetric::buckets() const {
  // @@protoc_insertion_point(field_list:PBWorker_HistogramMetric.buckets)
  return _impl_.buckets_;
}

// -------------------------------------------------------------------

// PBWorker_Metrics

// optional double load = 1;
inline bool PBWorker_Metrics::_internal_has_load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_Metrics::has_load() const {
  return _internal_has_load();
}
inline void PBWorker_Metrics::clear_load() {
  _impl_.load_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PBWorker_Metrics::_internal_load() const {
  return _impl_.load_;
}
inline double PBWorker_Metrics::load() const {
  // @@protoc_insertion_point(field_get:PBWorker_Metrics.load)
  return _internal_load();
}
inline void PBWorker_Metrics::_internal_set_load(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.load_ = value;
}
inline void PBWorker_Metrics::set_load(double value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:PBWorker_Metrics.load)
}

// optional uint32 gauge_metric_count = 2;
inline bool PBWorker_Metrics::_internal_has_gauge_metric_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorker_Metrics::has_gauge_metric_count() const {
  return _internal_has_gauge_metric_count();
}
inline void PBWorker_Metrics::clear_gauge_metric_count() {
  _impl_.gauge_metric_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorker_Metrics::_internal_gauge_metric_count() const {
  return _impl_.gauge_metric_count_;
}
inline uint32_t PBWorker_Metrics::gauge_metric_count() const {
  // @@protoc_insertion_point(field_get:PBWorker_Metrics.gauge_metric_count)
  return _internal_gauge_metric_count();
}
inline void PBWorker_Metrics::_internal_set_gauge_metric_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gauge_metric_count_ = value;
}
inline void PBWorker_Metrics::set_gauge_metric_count(uint32_t value) {
  _internal_set_gauge_metric_count(value);
  // @@protoc_insertion_point(field_set:PBWorker_Metrics.gauge_metric_count)
}

// repeated .PBWorker_GaugeMetric gauge_metrics = 3;
inline int PBWorker_Metrics::_internal_gauge_metrics_size() const {
  return _impl_.gauge_metrics_.size();
}
inline int PBWorker_Metrics::gauge_metrics_size() const {
  return _internal_gauge_metrics_size();
}
inline void PBWorker_Metrics::clear_gauge_metrics() {
  _impl_.gauge_metrics_.Clear();
}
inline ::PBWorker_GaugeMetric* PBWorker_Metrics::mutable_gauge_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorker_Metrics.gauge_metrics)
  return _impl_.gauge_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_GaugeMetric >*
PBWorker_Metrics::mutable_gauge_metrics() {
  // @@protoc_insertion_point(field_mutable_list:PBWorker_Metrics.gauge_metrics)
  return &_impl_.gauge_metrics_;
}
inline const ::PBWorker_GaugeMetric& PBWorker_Metrics::_internal_gauge_metrics(int index) const {
  return _impl_.gauge_metrics_.Get(index);
}
inline const ::PBWorker_GaugeMetric& PBWorker_Metrics::gauge_metrics(int index) const {
  // @@protoc_insertion_point(field_get:PBWorker_Metrics.gauge_metrics)
  return _internal_gauge_metrics(index);
}
inline ::PBWorker_GaugeMetric* PBWorker_Metrics::_internal_add_gauge_metrics() {
  return _impl_.gauge_metrics_.Add();
}
inline ::PBWorker_GaugeMetric* PBWorker_Metrics::add_gauge_metrics() {
  ::PBWorker_GaugeMetric* _add = _internal_add_gauge_metrics();
  // @@protoc_insertion_point(field_add:PBWorker_Metrics.gauge_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_GaugeMetric >&
PBWorker_Metrics::gauge_metrics() const {
  // @@protoc_insertion_point(field_list:PBWorker_Metrics.gauge_metrics)
  return _impl_.gauge_metrics_;
}

// optional uint32 histogram_metric_count = 4;
inline bool PBWorker_Metrics::_internal_has_histogram_metric_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBWorker_Metrics::has_histogram_metric_count() const {
  return _internal_has_histogram_metric_count();
}
inline void PBWorker_Metrics::clear_histogram_metric_count() {
  _impl_.histogram_metric_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PBWorker_Metrics::_internal_histogram_metric_count() const {
  return _impl_.histogram_metric_count_;
}
inline uint32_t PBWorker_Metrics::histogram_metric_count() const {
  // @@protoc_insertion_point(field_get:PBWorker_Metrics.histogram_metric_count)
  return _internal_histogram_metric_count();
}
inline void PBWorker_Metrics::_internal_set_histogram_metric_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.histogram_metric_count_ = value;
}
inline void PBWorker_Metrics::set_histogram_metric_count(uint32_t value) {
  _internal_set_histogram_metric_count(value);
  // @@protoc_insertion_point(field_set:PBWorker_Metrics.histogram_metric_count)
}

// repeated .PBWorker_HistogramMetric histogram_metrics = 5;
inline int PBWorker_Metrics::_internal_histogram_metrics_size() const {
  return _impl_.histogram_metrics_.size();
}
inline int PBWorker_Metrics::histogram_metrics_size() const {
  return _internal_histogram_metrics_size();
}
inline void PBWorker_Metrics::clear_histogram_metrics() {
  _impl_.histogram_metrics_.Clear();
}
inline ::PBWorker_HistogramMetric* PBWorker_Metrics::mutable_histogram_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorker_Metrics.histogram_metrics)
  return _impl_.histogram_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetric >*
PBWorker_Metrics::mutable_histogram_metrics() {
  // @@protoc_insertion_point(field_mutable_list:PBWorker_Metrics.histogram_metrics)
  return &_impl_.histogram_metrics_;
}
inline const ::PBWorker_HistogramMetric& PBWorker_Metrics::_internal_histogram_metrics(int index) const {
  return _impl_.histogram_metrics_.Get(index);
}
inline const ::PBWorker_HistogramMetric& PBWorker_Metrics::histogram_metrics(int index) const {
  // @@protoc_insertion_point(field_get:PBWorker_Metrics.histogram_metrics)
  return _internal_histogram_metrics(index);
}
inline ::PBWorker_HistogramMetric* PBWorker_Metrics::_internal_add_histogram_metrics() {
  return _impl_.histogram_metrics_.Add();
}
inline ::PBWorker_HistogramMetric* PBWorker_Metrics::add_histogram_metrics() {
  ::PBWorker_HistogramMetric* _add = _internal_add_histogram_metrics();
  // @@protoc_insertion_point(field_add:PBWorker_Metrics.histogram_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_HistogramMetric >&
PBWorker_Metrics::histogram_metrics() const {
  // @@protoc_insertion_point(field_list:PBWorker_Metrics.histogram_metrics)
  return _impl_.histogram_metrics_;
}

// -------------------------------------------------------------------

// PBSchema_ComponentData

// optional uint32 schema_id = 1;
inline bool PBSchema_ComponentData::_internal_has_schema_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBSchema_ComponentData::has_schema_id() const {
  return _internal_has_schema_id();
}
inline void PBSchema_ComponentData::clear_schema_id() {
  _impl_.schema_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBSchema_ComponentData::_internal_schema_id() const {
  return _impl_.schema_id_;
}
inline uint32_t PBSchema_ComponentData::schema_id() const {
  // @@protoc_insertion_point(field_get:PBSchema_ComponentData.schema_id)
  return _internal_schema_id();
}
inline void PBSchema_ComponentData::_internal_set_schema_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.schema_id_ = value;
}
inline void PBSchema_ComponentData::set_schema_id(uint32_t value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:PBSchema_ComponentData.schema_id)
}

// optional bytes data = 2;
inline bool PBSchema_ComponentData::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBSchema_ComponentData::has_data() const {
  return _internal_has_data();
}
inline void PBSchema_ComponentData::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBSchema_ComponentData::data() const {
  // @@protoc_insertion_point(field_get:PBSchema_ComponentData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBSchema_ComponentData::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBSchema_ComponentData.data)
}
inline std::string* PBSchema_ComponentData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PBSchema_ComponentData.data)
  return _s;
}
inline const std::string& PBSchema_ComponentData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PBSchema_ComponentData::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PBSchema_ComponentData::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PBSchema_ComponentData::release_data() {
  // @@protoc_insertion_point(field_release:PBSchema_ComponentData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBSchema_ComponentData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBSchema_ComponentData.data)
}

// -------------------------------------------------------------------

// PBWorker_ComponentDataHandle

// -------------------------------------------------------------------

// PBWorker_ComponentData

// optional bytes reserved = 1;
inline bool PBWorker_ComponentData::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_ComponentData::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorker_ComponentData::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_ComponentData::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentData.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_ComponentData::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_ComponentData.reserved)
}
inline std::string* PBWorker_ComponentData::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentData.reserved)
  return _s;
}
inline const std::string& PBWorker_ComponentData::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorker_ComponentData::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_ComponentData::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_ComponentData::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentData.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_ComponentData::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentData.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorker_ComponentData::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorker_ComponentData::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorker_ComponentData::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorker_ComponentData::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorker_ComponentData::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentData.component_id)
  return _internal_component_id();
}
inline void PBWorker_ComponentData::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorker_ComponentData::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorker_ComponentData.component_id)
}

// optional .PBSchema_ComponentData schema_type = 3;
inline bool PBWorker_ComponentData::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorker_ComponentData::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorker_ComponentData::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchema_ComponentData& PBWorker_ComponentData::_internal_schema_type() const {
  const ::PBSchema_ComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchema_ComponentData&>(
      ::_PBSchema_ComponentData_default_instance_);
}
inline const ::PBSchema_ComponentData& PBWorker_ComponentData::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentData.schema_type)
  return _internal_schema_type();
}
inline void PBWorker_ComponentData::unsafe_arena_set_allocated_schema_type(
    ::PBSchema_ComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_ComponentData.schema_type)
}
inline ::PBSchema_ComponentData* PBWorker_ComponentData::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentData::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentData.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentData::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchema_ComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentData::mutable_schema_type() {
  ::PBSchema_ComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentData.schema_type)
  return _msg;
}
inline void PBWorker_ComponentData::set_allocated_schema_type(::PBSchema_ComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentData.schema_type)
}

// optional .PBWorker_ComponentDataHandle user_handle = 4;
inline bool PBWorker_ComponentData::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorker_ComponentData::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorker_ComponentData::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_ComponentData::_internal_user_handle() const {
  const ::PBWorker_ComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorker_ComponentDataHandle&>(
      ::_PBWorker_ComponentDataHandle_default_instance_);
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_ComponentData::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentData.user_handle)
  return _internal_user_handle();
}
inline void PBWorker_ComponentData::unsafe_arena_set_allocated_user_handle(
    ::PBWorker_ComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_ComponentData.user_handle)
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentData::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentData::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentData.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentData::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorker_ComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentData::mutable_user_handle() {
  ::PBWorker_ComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentData.user_handle)
  return _msg;
}
inline void PBWorker_ComponentData::set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentData.user_handle)
}

// -------------------------------------------------------------------

// PBWorker_Entity

// optional int64 entity_id = 1;
inline bool PBWorker_Entity::_internal_has_entity_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_Entity::has_entity_id() const {
  return _internal_has_entity_id();
}
inline void PBWorker_Entity::clear_entity_id() {
  _impl_.entity_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t PBWorker_Entity::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline int64_t PBWorker_Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:PBWorker_Entity.entity_id)
  return _internal_entity_id();
}
inline void PBWorker_Entity::_internal_set_entity_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.entity_id_ = value;
}
inline void PBWorker_Entity::set_entity_id(int64_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:PBWorker_Entity.entity_id)
}

// optional uint32 component_count = 2;
inline bool PBWorker_Entity::_internal_has_component_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBWorker_Entity::has_component_count() const {
  return _internal_has_component_count();
}
inline void PBWorker_Entity::clear_component_count() {
  _impl_.component_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PBWorker_Entity::_internal_component_count() const {
  return _impl_.component_count_;
}
inline uint32_t PBWorker_Entity::component_count() const {
  // @@protoc_insertion_point(field_get:PBWorker_Entity.component_count)
  return _internal_component_count();
}
inline void PBWorker_Entity::_internal_set_component_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.component_count_ = value;
}
inline void PBWorker_Entity::set_component_count(uint32_t value) {
  _internal_set_component_count(value);
  // @@protoc_insertion_point(field_set:PBWorker_Entity.component_count)
}

// repeated .PBWorker_ComponentData components = 3;
inline int PBWorker_Entity::_internal_components_size() const {
  return _impl_.components_.size();
}
inline int PBWorker_Entity::components_size() const {
  return _internal_components_size();
}
inline void PBWorker_Entity::clear_components() {
  _impl_.components_.Clear();
}
inline ::PBWorker_ComponentData* PBWorker_Entity::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorker_Entity.components)
  return _impl_.components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_ComponentData >*
PBWorker_Entity::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:PBWorker_Entity.components)
  return &_impl_.components_;
}
inline const ::PBWorker_ComponentData& PBWorker_Entity::_internal_components(int index) const {
  return _impl_.components_.Get(index);
}
inline const ::PBWorker_ComponentData& PBWorker_Entity::components(int index) const {
  // @@protoc_insertion_point(field_get:PBWorker_Entity.components)
  return _internal_components(index);
}
inline ::PBWorker_ComponentData* PBWorker_Entity::_internal_add_components() {
  return _impl_.components_.Add();
}
inline ::PBWorker_ComponentData* PBWorker_Entity::add_components() {
  ::PBWorker_ComponentData* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:PBWorker_Entity.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PBWorker_ComponentData >&
PBWorker_Entity::components() const {
  // @@protoc_insertion_point(field_list:PBWorker_Entity.components)
  return _impl_.components_;
}

// -------------------------------------------------------------------

// PBWorker_ComponentUpdate

// optional bytes reserved = 1;
inline bool PBWorker_ComponentUpdate::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_ComponentUpdate::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorker_ComponentUpdate::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_ComponentUpdate::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentUpdate.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_ComponentUpdate::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_ComponentUpdate.reserved)
}
inline std::string* PBWorker_ComponentUpdate::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentUpdate.reserved)
  return _s;
}
inline const std::string& PBWorker_ComponentUpdate::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorker_ComponentUpdate::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_ComponentUpdate::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_ComponentUpdate::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentUpdate.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_ComponentUpdate::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentUpdate.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorker_ComponentUpdate::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorker_ComponentUpdate::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorker_ComponentUpdate::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorker_ComponentUpdate::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorker_ComponentUpdate::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentUpdate.component_id)
  return _internal_component_id();
}
inline void PBWorker_ComponentUpdate::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorker_ComponentUpdate::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorker_ComponentUpdate.component_id)
}

// optional .PBSchema_ComponentData schema_type = 3;
inline bool PBWorker_ComponentUpdate::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorker_ComponentUpdate::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorker_ComponentUpdate::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchema_ComponentData& PBWorker_ComponentUpdate::_internal_schema_type() const {
  const ::PBSchema_ComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchema_ComponentData&>(
      ::_PBSchema_ComponentData_default_instance_);
}
inline const ::PBSchema_ComponentData& PBWorker_ComponentUpdate::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentUpdate.schema_type)
  return _internal_schema_type();
}
inline void PBWorker_ComponentUpdate::unsafe_arena_set_allocated_schema_type(
    ::PBSchema_ComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_ComponentUpdate.schema_type)
}
inline ::PBSchema_ComponentData* PBWorker_ComponentUpdate::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentUpdate::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentUpdate.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentUpdate::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchema_ComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchema_ComponentData* PBWorker_ComponentUpdate::mutable_schema_type() {
  ::PBSchema_ComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentUpdate.schema_type)
  return _msg;
}
inline void PBWorker_ComponentUpdate::set_allocated_schema_type(::PBSchema_ComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentUpdate.schema_type)
}

// optional .PBWorker_ComponentDataHandle user_handle = 4;
inline bool PBWorker_ComponentUpdate::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorker_ComponentUpdate::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorker_ComponentUpdate::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_ComponentUpdate::_internal_user_handle() const {
  const ::PBWorker_ComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorker_ComponentDataHandle&>(
      ::_PBWorker_ComponentDataHandle_default_instance_);
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_ComponentUpdate::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorker_ComponentUpdate.user_handle)
  return _internal_user_handle();
}
inline void PBWorker_ComponentUpdate::unsafe_arena_set_allocated_user_handle(
    ::PBWorker_ComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_ComponentUpdate.user_handle)
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentUpdate::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentUpdate::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorker_ComponentUpdate.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentUpdate::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorker_ComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_ComponentUpdate::mutable_user_handle() {
  ::PBWorker_ComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorker_ComponentUpdate.user_handle)
  return _msg;
}
inline void PBWorker_ComponentUpdate::set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_ComponentUpdate.user_handle)
}

// -------------------------------------------------------------------

// PBWorker_WorkerAttributes

// optional uint32 attribute_count = 1;
inline bool PBWorker_WorkerAttributes::_internal_has_attribute_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_WorkerAttributes::has_attribute_count() const {
  return _internal_has_attribute_count();
}
inline void PBWorker_WorkerAttributes::clear_attribute_count() {
  _impl_.attribute_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PBWorker_WorkerAttributes::_internal_attribute_count() const {
  return _impl_.attribute_count_;
}
inline uint32_t PBWorker_WorkerAttributes::attribute_count() const {
  // @@protoc_insertion_point(field_get:PBWorker_WorkerAttributes.attribute_count)
  return _internal_attribute_count();
}
inline void PBWorker_WorkerAttributes::_internal_set_attribute_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attribute_count_ = value;
}
inline void PBWorker_WorkerAttributes::set_attribute_count(uint32_t value) {
  _internal_set_attribute_count(value);
  // @@protoc_insertion_point(field_set:PBWorker_WorkerAttributes.attribute_count)
}

// repeated bytes attributes = 2;
inline int PBWorker_WorkerAttributes::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int PBWorker_WorkerAttributes::attributes_size() const {
  return _internal_attributes_size();
}
inline void PBWorker_WorkerAttributes::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline std::string* PBWorker_WorkerAttributes::add_attributes() {
  std::string* _s = _internal_add_attributes();
  // @@protoc_insertion_point(field_add_mutable:PBWorker_WorkerAttributes.attributes)
  return _s;
}
inline const std::string& PBWorker_WorkerAttributes::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const std::string& PBWorker_WorkerAttributes::attributes(int index) const {
  // @@protoc_insertion_point(field_get:PBWorker_WorkerAttributes.attributes)
  return _internal_attributes(index);
}
inline std::string* PBWorker_WorkerAttributes::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PBWorker_WorkerAttributes.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline void PBWorker_WorkerAttributes::set_attributes(int index, const std::string& value) {
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::set_attributes(int index, std::string&& value) {
  _impl_.attributes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::set_attributes(int index, const void* value, size_t size) {
  _impl_.attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBWorker_WorkerAttributes.attributes)
}
inline std::string* PBWorker_WorkerAttributes::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline void PBWorker_WorkerAttributes::add_attributes(const std::string& value) {
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::add_attributes(std::string&& value) {
  _impl_.attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PBWorker_WorkerAttributes.attributes)
}
inline void PBWorker_WorkerAttributes::add_attributes(const void* value, size_t size) {
  _impl_.attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PBWorker_WorkerAttributes.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PBWorker_WorkerAttributes::attributes() const {
  // @@protoc_insertion_point(field_list:PBWorker_WorkerAttributes.attributes)
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PBWorker_WorkerAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PBWorker_WorkerAttributes.attributes)
  return &_impl_.attributes_;
}

// -------------------------------------------------------------------

// PBWorker_CommandRequest

// optional bytes reserved = 1;
inline bool PBWorker_CommandRequest::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_CommandRequest::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorker_CommandRequest::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_CommandRequest::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandRequest.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_CommandRequest::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_CommandRequest.reserved)
}
inline std::string* PBWorker_CommandRequest::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandRequest.reserved)
  return _s;
}
inline const std::string& PBWorker_CommandRequest::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorker_CommandRequest::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_CommandRequest::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_CommandRequest::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandRequest.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_CommandRequest::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandRequest.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorker_CommandRequest::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorker_CommandRequest::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorker_CommandRequest::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorker_CommandRequest::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorker_CommandRequest::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandRequest.component_id)
  return _internal_component_id();
}
inline void PBWorker_CommandRequest::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorker_CommandRequest::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorker_CommandRequest.component_id)
}

// optional .PBSchema_ComponentData schema_type = 3;
inline bool PBWorker_CommandRequest::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorker_CommandRequest::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorker_CommandRequest::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchema_ComponentData& PBWorker_CommandRequest::_internal_schema_type() const {
  const ::PBSchema_ComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchema_ComponentData&>(
      ::_PBSchema_ComponentData_default_instance_);
}
inline const ::PBSchema_ComponentData& PBWorker_CommandRequest::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandRequest.schema_type)
  return _internal_schema_type();
}
inline void PBWorker_CommandRequest::unsafe_arena_set_allocated_schema_type(
    ::PBSchema_ComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_CommandRequest.schema_type)
}
inline ::PBSchema_ComponentData* PBWorker_CommandRequest::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_CommandRequest::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandRequest.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_CommandRequest::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchema_ComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchema_ComponentData* PBWorker_CommandRequest::mutable_schema_type() {
  ::PBSchema_ComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandRequest.schema_type)
  return _msg;
}
inline void PBWorker_CommandRequest::set_allocated_schema_type(::PBSchema_ComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandRequest.schema_type)
}

// optional .PBWorker_ComponentDataHandle user_handle = 4;
inline bool PBWorker_CommandRequest::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorker_CommandRequest::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorker_CommandRequest::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_CommandRequest::_internal_user_handle() const {
  const ::PBWorker_ComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorker_ComponentDataHandle&>(
      ::_PBWorker_ComponentDataHandle_default_instance_);
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_CommandRequest::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandRequest.user_handle)
  return _internal_user_handle();
}
inline void PBWorker_CommandRequest::unsafe_arena_set_allocated_user_handle(
    ::PBWorker_ComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_CommandRequest.user_handle)
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandRequest::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandRequest::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandRequest.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandRequest::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorker_ComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandRequest::mutable_user_handle() {
  ::PBWorker_ComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandRequest.user_handle)
  return _msg;
}
inline void PBWorker_CommandRequest::set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandRequest.user_handle)
}

// -------------------------------------------------------------------

// PBWorker_CommandResponse

// optional bytes reserved = 1;
inline bool PBWorker_CommandResponse::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBWorker_CommandResponse::has_reserved() const {
  return _internal_has_reserved();
}
inline void PBWorker_CommandResponse::clear_reserved() {
  _impl_.reserved_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBWorker_CommandResponse::reserved() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandResponse.reserved)
  return _internal_reserved();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBWorker_CommandResponse::set_reserved(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reserved_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBWorker_CommandResponse.reserved)
}
inline std::string* PBWorker_CommandResponse::mutable_reserved() {
  std::string* _s = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandResponse.reserved)
  return _s;
}
inline const std::string& PBWorker_CommandResponse::_internal_reserved() const {
  return _impl_.reserved_.Get();
}
inline void PBWorker_CommandResponse::_internal_set_reserved(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reserved_.Set(value, GetArenaForAllocation());
}
inline std::string* PBWorker_CommandResponse::_internal_mutable_reserved() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reserved_.Mutable(GetArenaForAllocation());
}
inline std::string* PBWorker_CommandResponse::release_reserved() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandResponse.reserved)
  if (!_internal_has_reserved()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reserved_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBWorker_CommandResponse::set_allocated_reserved(std::string* reserved) {
  if (reserved != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reserved_.SetAllocated(reserved, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserved_.IsDefault()) {
    _impl_.reserved_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandResponse.reserved)
}

// optional uint32 component_id = 2;
inline bool PBWorker_CommandResponse::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBWorker_CommandResponse::has_component_id() const {
  return _internal_has_component_id();
}
inline void PBWorker_CommandResponse::clear_component_id() {
  _impl_.component_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PBWorker_CommandResponse::_internal_component_id() const {
  return _impl_.component_id_;
}
inline uint32_t PBWorker_CommandResponse::component_id() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandResponse.component_id)
  return _internal_component_id();
}
inline void PBWorker_CommandResponse::_internal_set_component_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.component_id_ = value;
}
inline void PBWorker_CommandResponse::set_component_id(uint32_t value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:PBWorker_CommandResponse.component_id)
}

// optional .PBSchema_ComponentData schema_type = 3;
inline bool PBWorker_CommandResponse::_internal_has_schema_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.schema_type_ != nullptr);
  return value;
}
inline bool PBWorker_CommandResponse::has_schema_type() const {
  return _internal_has_schema_type();
}
inline void PBWorker_CommandResponse::clear_schema_type() {
  if (_impl_.schema_type_ != nullptr) _impl_.schema_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PBSchema_ComponentData& PBWorker_CommandResponse::_internal_schema_type() const {
  const ::PBSchema_ComponentData* p = _impl_.schema_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBSchema_ComponentData&>(
      ::_PBSchema_ComponentData_default_instance_);
}
inline const ::PBSchema_ComponentData& PBWorker_CommandResponse::schema_type() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandResponse.schema_type)
  return _internal_schema_type();
}
inline void PBWorker_CommandResponse::unsafe_arena_set_allocated_schema_type(
    ::PBSchema_ComponentData* schema_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_type_);
  }
  _impl_.schema_type_ = schema_type;
  if (schema_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_CommandResponse.schema_type)
}
inline ::PBSchema_ComponentData* PBWorker_CommandResponse::release_schema_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_CommandResponse::unsafe_arena_release_schema_type() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandResponse.schema_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PBSchema_ComponentData* temp = _impl_.schema_type_;
  _impl_.schema_type_ = nullptr;
  return temp;
}
inline ::PBSchema_ComponentData* PBWorker_CommandResponse::_internal_mutable_schema_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.schema_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBSchema_ComponentData>(GetArenaForAllocation());
    _impl_.schema_type_ = p;
  }
  return _impl_.schema_type_;
}
inline ::PBSchema_ComponentData* PBWorker_CommandResponse::mutable_schema_type() {
  ::PBSchema_ComponentData* _msg = _internal_mutable_schema_type();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandResponse.schema_type)
  return _msg;
}
inline void PBWorker_CommandResponse::set_allocated_schema_type(::PBSchema_ComponentData* schema_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.schema_type_;
  }
  if (schema_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema_type);
    if (message_arena != submessage_arena) {
      schema_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.schema_type_ = schema_type;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandResponse.schema_type)
}

// optional .PBWorker_ComponentDataHandle user_handle = 4;
inline bool PBWorker_CommandResponse::_internal_has_user_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_handle_ != nullptr);
  return value;
}
inline bool PBWorker_CommandResponse::has_user_handle() const {
  return _internal_has_user_handle();
}
inline void PBWorker_CommandResponse::clear_user_handle() {
  if (_impl_.user_handle_ != nullptr) _impl_.user_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_CommandResponse::_internal_user_handle() const {
  const ::PBWorker_ComponentDataHandle* p = _impl_.user_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBWorker_ComponentDataHandle&>(
      ::_PBWorker_ComponentDataHandle_default_instance_);
}
inline const ::PBWorker_ComponentDataHandle& PBWorker_CommandResponse::user_handle() const {
  // @@protoc_insertion_point(field_get:PBWorker_CommandResponse.user_handle)
  return _internal_user_handle();
}
inline void PBWorker_CommandResponse::unsafe_arena_set_allocated_user_handle(
    ::PBWorker_ComponentDataHandle* user_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_handle_);
  }
  _impl_.user_handle_ = user_handle;
  if (user_handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBWorker_CommandResponse.user_handle)
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandResponse::release_user_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandResponse::unsafe_arena_release_user_handle() {
  // @@protoc_insertion_point(field_release:PBWorker_CommandResponse.user_handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PBWorker_ComponentDataHandle* temp = _impl_.user_handle_;
  _impl_.user_handle_ = nullptr;
  return temp;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandResponse::_internal_mutable_user_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.user_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBWorker_ComponentDataHandle>(GetArenaForAllocation());
    _impl_.user_handle_ = p;
  }
  return _impl_.user_handle_;
}
inline ::PBWorker_ComponentDataHandle* PBWorker_CommandResponse::mutable_user_handle() {
  ::PBWorker_ComponentDataHandle* _msg = _internal_mutable_user_handle();
  // @@protoc_insertion_point(field_mutable:PBWorker_CommandResponse.user_handle)
  return _msg;
}
inline void PBWorker_CommandResponse::set_allocated_user_handle(::PBWorker_ComponentDataHandle* user_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_handle_;
  }
  if (user_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_handle);
    if (message_arena != submessage_arena) {
      user_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.user_handle_ = user_handle;
  // @@protoc_insertion_point(field_set_allocated:PBWorker_CommandResponse.user_handle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PBWorker_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBWorker_StatusCode>() {
  return ::PBWorker_StatusCode_descriptor();
}
template <> struct is_proto_enum< ::PBWorker_Authority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBWorker_Authority>() {
  return ::PBWorker_Authority_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WorkerData_2eproto
